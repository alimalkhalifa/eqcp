// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/npc.proto

package pb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Npc struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Lastname             string   `protobuf:"bytes,3,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Level                int64    `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Race                 int64    `protobuf:"varint,5,opt,name=race,proto3" json:"race,omitempty"`
	Class                int64    `protobuf:"varint,6,opt,name=class,proto3" json:"class,omitempty"`
	Bodytype             int64    `protobuf:"varint,7,opt,name=bodytype,proto3" json:"bodytype,omitempty"`
	Hp                   int64    `protobuf:"varint,8,opt,name=hp,proto3" json:"hp,omitempty"`
	Mana                 int64    `protobuf:"varint,9,opt,name=mana,proto3" json:"mana,omitempty"`
	Gender               int64    `protobuf:"varint,10,opt,name=gender,proto3" json:"gender,omitempty"`
	Texture              int64    `protobuf:"varint,11,opt,name=texture,proto3" json:"texture,omitempty"`
	Helmtexture          int64    `protobuf:"varint,12,opt,name=helmtexture,proto3" json:"helmtexture,omitempty"`
	Herosforgemodel      int64    `protobuf:"varint,13,opt,name=herosforgemodel,proto3" json:"herosforgemodel,omitempty"`
	Size                 float32  `protobuf:"fixed32,14,opt,name=size,proto3" json:"size,omitempty"`
	Hpregenrate          int64    `protobuf:"varint,15,opt,name=hpregenrate,proto3" json:"hpregenrate,omitempty"`
	Manaregenrate        int64    `protobuf:"varint,16,opt,name=manaregenrate,proto3" json:"manaregenrate,omitempty"`
	Loottableid          int64    `protobuf:"varint,17,opt,name=loottableid,proto3" json:"loottableid,omitempty"`
	Merchantid           int64    `protobuf:"varint,18,opt,name=merchantid,proto3" json:"merchantid,omitempty"`
	Altcurrencyid        int64    `protobuf:"varint,19,opt,name=altcurrencyid,proto3" json:"altcurrencyid,omitempty"`
	Npcspellsid          int64    `protobuf:"varint,20,opt,name=npcspellsid,proto3" json:"npcspellsid,omitempty"`
	Npcspellseffectsid   int64    `protobuf:"varint,21,opt,name=npcspellseffectsid,proto3" json:"npcspellseffectsid,omitempty"`
	Npcfactionid         int64    `protobuf:"varint,22,opt,name=npcfactionid,proto3" json:"npcfactionid,omitempty"`
	Adventuretemplateid  int64    `protobuf:"varint,23,opt,name=adventuretemplateid,proto3" json:"adventuretemplateid,omitempty"`
	Traptemplate         int64    `protobuf:"varint,24,opt,name=traptemplate,proto3" json:"traptemplate,omitempty"`
	Mindmg               int64    `protobuf:"varint,25,opt,name=mindmg,proto3" json:"mindmg,omitempty"`
	Maxdmg               int64    `protobuf:"varint,26,opt,name=maxdmg,proto3" json:"maxdmg,omitempty"`
	Attackcount          int64    `protobuf:"varint,27,opt,name=attackcount,proto3" json:"attackcount,omitempty"`
	Npcspecialattks      string   `protobuf:"bytes,28,opt,name=Npcspecialattks,proto3" json:"Npcspecialattks,omitempty"`
	Specialabilities     string   `protobuf:"bytes,29,opt,name=Specialabilities,proto3" json:"Specialabilities,omitempty"`
	Aggroradius          int64    `protobuf:"varint,30,opt,name=aggroradius,proto3" json:"aggroradius,omitempty"`
	Assistradius         int64    `protobuf:"varint,31,opt,name=assistradius,proto3" json:"assistradius,omitempty"`
	Face                 int64    `protobuf:"varint,32,opt,name=face,proto3" json:"face,omitempty"`
	Luclinhairstyle      int64    `protobuf:"varint,33,opt,name=luclinhairstyle,proto3" json:"luclinhairstyle,omitempty"`
	Luclinhaircolor      int64    `protobuf:"varint,34,opt,name=luclinhaircolor,proto3" json:"luclinhaircolor,omitempty"`
	Luclineyecolor       int64    `protobuf:"varint,35,opt,name=luclineyecolor,proto3" json:"luclineyecolor,omitempty"`
	Luclineyecolor2      int64    `protobuf:"varint,36,opt,name=luclineyecolor2,proto3" json:"luclineyecolor2,omitempty"`
	Luclinbeardcolor     int64    `protobuf:"varint,37,opt,name=luclinbeardcolor,proto3" json:"luclinbeardcolor,omitempty"`
	Luclinbeard          int64    `protobuf:"varint,38,opt,name=luclinbeard,proto3" json:"luclinbeard,omitempty"`
	Drakkinheritage      int64    `protobuf:"varint,39,opt,name=drakkinheritage,proto3" json:"drakkinheritage,omitempty"`
	Drakkintattoo        int64    `protobuf:"varint,40,opt,name=drakkintattoo,proto3" json:"drakkintattoo,omitempty"`
	Drakkindetails       int64    `protobuf:"varint,41,opt,name=drakkindetails,proto3" json:"drakkindetails,omitempty"`
	Armortintid          int64    `protobuf:"varint,42,opt,name=armortintid,proto3" json:"armortintid,omitempty"`
	Armortintred         int64    `protobuf:"varint,43,opt,name=armortintred,proto3" json:"armortintred,omitempty"`
	Armortintgreen       int64    `protobuf:"varint,44,opt,name=armortintgreen,proto3" json:"armortintgreen,omitempty"`
	Armortintblue        int64    `protobuf:"varint,45,opt,name=armortintblue,proto3" json:"armortintblue,omitempty"`
	Dmeleetexture1       int64    `protobuf:"varint,46,opt,name=dmeleetexture1,proto3" json:"dmeleetexture1,omitempty"`
	Dmeleetexture2       int64    `protobuf:"varint,47,opt,name=dmeleetexture2,proto3" json:"dmeleetexture2,omitempty"`
	Ammoidfile           string   `protobuf:"bytes,48,opt,name=ammoidfile,proto3" json:"ammoidfile,omitempty"`
	Primmeleetype        int64    `protobuf:"varint,49,opt,name=primmeleetype,proto3" json:"primmeleetype,omitempty"`
	Secmeleetype         int64    `protobuf:"varint,50,opt,name=secmeleetype,proto3" json:"secmeleetype,omitempty"`
	Rangedtype           int64    `protobuf:"varint,51,opt,name=rangedtype,proto3" json:"rangedtype,omitempty"`
	Runspeed             float32  `protobuf:"fixed32,52,opt,name=runspeed,proto3" json:"runspeed,omitempty"`
	Mr                   int64    `protobuf:"varint,53,opt,name=mr,proto3" json:"mr,omitempty"`
	Cr                   int64    `protobuf:"varint,54,opt,name=cr,proto3" json:"cr,omitempty"`
	Dr                   int64    `protobuf:"varint,55,opt,name=dr,proto3" json:"dr,omitempty"`
	Fr                   int64    `protobuf:"varint,56,opt,name=fr,proto3" json:"fr,omitempty"`
	Pr                   int64    `protobuf:"varint,57,opt,name=pr,proto3" json:"pr,omitempty"`
	Corrup               int64    `protobuf:"varint,58,opt,name=corrup,proto3" json:"corrup,omitempty"`
	Phr                  int64    `protobuf:"varint,59,opt,name=phr,proto3" json:"phr,omitempty"`
	Seeinvis             int64    `protobuf:"varint,60,opt,name=seeinvis,proto3" json:"seeinvis,omitempty"`
	Seeinvisundead       int64    `protobuf:"varint,61,opt,name=seeinvisundead,proto3" json:"seeinvisundead,omitempty"`
	Qglobal              int64    `protobuf:"varint,62,opt,name=qglobal,proto3" json:"qglobal,omitempty"`
	Ac                   int64    `protobuf:"varint,63,opt,name=ac,proto3" json:"ac,omitempty"`
	Npcaggro             int64    `protobuf:"varint,64,opt,name=npcaggro,proto3" json:"npcaggro,omitempty"`
	Spawnlimit           int64    `protobuf:"varint,65,opt,name=spawnlimit,proto3" json:"spawnlimit,omitempty"`
	Attackspeed          float32  `protobuf:"fixed32,66,opt,name=attackspeed,proto3" json:"attackspeed,omitempty"`
	Attackdelay          int64    `protobuf:"varint,67,opt,name=attackdelay,proto3" json:"attackdelay,omitempty"`
	Findable             int64    `protobuf:"varint,68,opt,name=findable,proto3" json:"findable,omitempty"`
	Str                  int64    `protobuf:"varint,69,opt,name=str,proto3" json:"str,omitempty"`
	Sta                  int64    `protobuf:"varint,70,opt,name=sta,proto3" json:"sta,omitempty"`
	Dex                  int64    `protobuf:"varint,71,opt,name=dex,proto3" json:"dex,omitempty"`
	Agi                  int64    `protobuf:"varint,72,opt,name=agi,proto3" json:"agi,omitempty"`
	Int                  int64    `protobuf:"varint,73,opt,name=int,proto3" json:"int,omitempty"`
	Wis                  int64    `protobuf:"varint,74,opt,name=wis,proto3" json:"wis,omitempty"`
	Cha                  int64    `protobuf:"varint,75,opt,name=cha,proto3" json:"cha,omitempty"`
	Seehide              int64    `protobuf:"varint,76,opt,name=seehide,proto3" json:"seehide,omitempty"`
	Seeimprovedhide      int64    `protobuf:"varint,77,opt,name=seeimprovedhide,proto3" json:"seeimprovedhide,omitempty"`
	Trackable            int64    `protobuf:"varint,78,opt,name=trackable,proto3" json:"trackable,omitempty"`
	Isbot                int64    `protobuf:"varint,79,opt,name=isbot,proto3" json:"isbot,omitempty"`
	Exclude              int64    `protobuf:"varint,80,opt,name=exclude,proto3" json:"exclude,omitempty"`
	Atk                  int64    `protobuf:"varint,81,opt,name=atk,proto3" json:"atk,omitempty"`
	Accuracy             int64    `protobuf:"varint,82,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Avoidance            int64    `protobuf:"varint,83,opt,name=avoidance,proto3" json:"avoidance,omitempty"`
	Slowmitigation       int64    `protobuf:"varint,84,opt,name=slowmitigation,proto3" json:"slowmitigation,omitempty"`
	Version              int64    `protobuf:"varint,85,opt,name=version,proto3" json:"version,omitempty"`
	Maxlevel             int64    `protobuf:"varint,86,opt,name=maxlevel,proto3" json:"maxlevel,omitempty"`
	Scalerate            int64    `protobuf:"varint,87,opt,name=scalerate,proto3" json:"scalerate,omitempty"`
	Privatecorpse        int64    `protobuf:"varint,88,opt,name=privatecorpse,proto3" json:"privatecorpse,omitempty"`
	Uniquespawnbyname    int64    `protobuf:"varint,89,opt,name=uniquespawnbyname,proto3" json:"uniquespawnbyname,omitempty"`
	Underwater           int64    `protobuf:"varint,90,opt,name=underwater,proto3" json:"underwater,omitempty"`
	Isquest              int64    `protobuf:"varint,91,opt,name=isquest,proto3" json:"isquest,omitempty"`
	Emoteid              int64    `protobuf:"varint,92,opt,name=emoteid,proto3" json:"emoteid,omitempty"`
	Spellscale           float32  `protobuf:"fixed32,93,opt,name=spellscale,proto3" json:"spellscale,omitempty"`
	Healscale            float32  `protobuf:"fixed32,94,opt,name=healscale,proto3" json:"healscale,omitempty"`
	Notargethotkey       int64    `protobuf:"varint,95,opt,name=notargethotkey,proto3" json:"notargethotkey,omitempty"`
	Raidtarget           int64    `protobuf:"varint,96,opt,name=raidtarget,proto3" json:"raidtarget,omitempty"`
	Armtexture           int64    `protobuf:"varint,97,opt,name=armtexture,proto3" json:"armtexture,omitempty"`
	Bracertexture        int64    `protobuf:"varint,98,opt,name=bracertexture,proto3" json:"bracertexture,omitempty"`
	Handtexture          int64    `protobuf:"varint,99,opt,name=handtexture,proto3" json:"handtexture,omitempty"`
	Legtexture           int64    `protobuf:"varint,100,opt,name=legtexture,proto3" json:"legtexture,omitempty"`
	Feettexture          int64    `protobuf:"varint,101,opt,name=feettexture,proto3" json:"feettexture,omitempty"`
	Light                int64    `protobuf:"varint,102,opt,name=light,proto3" json:"light,omitempty"`
	Walkspeed            int64    `protobuf:"varint,103,opt,name=walkspeed,proto3" json:"walkspeed,omitempty"`
	Peqid                int64    `protobuf:"varint,104,opt,name=peqid,proto3" json:"peqid,omitempty"`
	Unique               int64    `protobuf:"varint,105,opt,name=unique,proto3" json:"unique,omitempty"`
	Fixed                int64    `protobuf:"varint,106,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Ignoredespawn        int64    `protobuf:"varint,107,opt,name=ignoredespawn,proto3" json:"ignoredespawn,omitempty"`
	Showname             int64    `protobuf:"varint,108,opt,name=showname,proto3" json:"showname,omitempty"`
	Untargetable         int64    `protobuf:"varint,109,opt,name=untargetable,proto3" json:"untargetable,omitempty"`
	Charmac              int64    `protobuf:"varint,110,opt,name=charmac,proto3" json:"charmac,omitempty"`
	Charmmindmg          int64    `protobuf:"varint,111,opt,name=charmmindmg,proto3" json:"charmmindmg,omitempty"`
	Charmmaxdmg          int64    `protobuf:"varint,112,opt,name=charmmaxdmg,proto3" json:"charmmaxdmg,omitempty"`
	Charmattackdelay     int64    `protobuf:"varint,113,opt,name=charmattackdelay,proto3" json:"charmattackdelay,omitempty"`
	Charmaccuracyrating  int64    `protobuf:"varint,114,opt,name=charmaccuracyrating,proto3" json:"charmaccuracyrating,omitempty"`
	Charmavoidancerating int64    `protobuf:"varint,115,opt,name=charmavoidancerating,proto3" json:"charmavoidancerating,omitempty"`
	Charmatk             int64    `protobuf:"varint,116,opt,name=charmatk,proto3" json:"charmatk,omitempty"`
	Skipgloballoot       int64    `protobuf:"varint,117,opt,name=skipgloballoot,proto3" json:"skipgloballoot,omitempty"`
	Rarespawn            int64    `protobuf:"varint,118,opt,name=rarespawn,proto3" json:"rarespawn,omitempty"`
	Stuckbehavior        int64    `protobuf:"varint,119,opt,name=stuckbehavior,proto3" json:"stuckbehavior,omitempty"`
	Cleanname            string   `protobuf:"bytes,122,opt,name=cleanname,proto3" json:"cleanname,omitempty"`
	Model                int64    `protobuf:"varint,123,opt,name=model,proto3" json:"model,omitempty"`
	Flymode              int64    `protobuf:"varint,124,opt,name=flymode,proto3" json:"flymode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Npc) Reset()         { *m = Npc{} }
func (m *Npc) String() string { return proto.CompactTextString(m) }
func (*Npc) ProtoMessage()    {}
func (*Npc) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{0}
}

func (m *Npc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Npc.Unmarshal(m, b)
}
func (m *Npc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Npc.Marshal(b, m, deterministic)
}
func (m *Npc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc.Merge(m, src)
}
func (m *Npc) XXX_Size() int {
	return xxx_messageInfo_Npc.Size(m)
}
func (m *Npc) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc.DiscardUnknown(m)
}

var xxx_messageInfo_Npc proto.InternalMessageInfo

func (m *Npc) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Npc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Npc) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *Npc) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Npc) GetRace() int64 {
	if m != nil {
		return m.Race
	}
	return 0
}

func (m *Npc) GetClass() int64 {
	if m != nil {
		return m.Class
	}
	return 0
}

func (m *Npc) GetBodytype() int64 {
	if m != nil {
		return m.Bodytype
	}
	return 0
}

func (m *Npc) GetHp() int64 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *Npc) GetMana() int64 {
	if m != nil {
		return m.Mana
	}
	return 0
}

func (m *Npc) GetGender() int64 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *Npc) GetTexture() int64 {
	if m != nil {
		return m.Texture
	}
	return 0
}

func (m *Npc) GetHelmtexture() int64 {
	if m != nil {
		return m.Helmtexture
	}
	return 0
}

func (m *Npc) GetHerosforgemodel() int64 {
	if m != nil {
		return m.Herosforgemodel
	}
	return 0
}

func (m *Npc) GetSize() float32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Npc) GetHpregenrate() int64 {
	if m != nil {
		return m.Hpregenrate
	}
	return 0
}

func (m *Npc) GetManaregenrate() int64 {
	if m != nil {
		return m.Manaregenrate
	}
	return 0
}

func (m *Npc) GetLoottableid() int64 {
	if m != nil {
		return m.Loottableid
	}
	return 0
}

func (m *Npc) GetMerchantid() int64 {
	if m != nil {
		return m.Merchantid
	}
	return 0
}

func (m *Npc) GetAltcurrencyid() int64 {
	if m != nil {
		return m.Altcurrencyid
	}
	return 0
}

func (m *Npc) GetNpcspellsid() int64 {
	if m != nil {
		return m.Npcspellsid
	}
	return 0
}

func (m *Npc) GetNpcspellseffectsid() int64 {
	if m != nil {
		return m.Npcspellseffectsid
	}
	return 0
}

func (m *Npc) GetNpcfactionid() int64 {
	if m != nil {
		return m.Npcfactionid
	}
	return 0
}

func (m *Npc) GetAdventuretemplateid() int64 {
	if m != nil {
		return m.Adventuretemplateid
	}
	return 0
}

func (m *Npc) GetTraptemplate() int64 {
	if m != nil {
		return m.Traptemplate
	}
	return 0
}

func (m *Npc) GetMindmg() int64 {
	if m != nil {
		return m.Mindmg
	}
	return 0
}

func (m *Npc) GetMaxdmg() int64 {
	if m != nil {
		return m.Maxdmg
	}
	return 0
}

func (m *Npc) GetAttackcount() int64 {
	if m != nil {
		return m.Attackcount
	}
	return 0
}

func (m *Npc) GetNpcspecialattks() string {
	if m != nil {
		return m.Npcspecialattks
	}
	return ""
}

func (m *Npc) GetSpecialabilities() string {
	if m != nil {
		return m.Specialabilities
	}
	return ""
}

func (m *Npc) GetAggroradius() int64 {
	if m != nil {
		return m.Aggroradius
	}
	return 0
}

func (m *Npc) GetAssistradius() int64 {
	if m != nil {
		return m.Assistradius
	}
	return 0
}

func (m *Npc) GetFace() int64 {
	if m != nil {
		return m.Face
	}
	return 0
}

func (m *Npc) GetLuclinhairstyle() int64 {
	if m != nil {
		return m.Luclinhairstyle
	}
	return 0
}

func (m *Npc) GetLuclinhaircolor() int64 {
	if m != nil {
		return m.Luclinhaircolor
	}
	return 0
}

func (m *Npc) GetLuclineyecolor() int64 {
	if m != nil {
		return m.Luclineyecolor
	}
	return 0
}

func (m *Npc) GetLuclineyecolor2() int64 {
	if m != nil {
		return m.Luclineyecolor2
	}
	return 0
}

func (m *Npc) GetLuclinbeardcolor() int64 {
	if m != nil {
		return m.Luclinbeardcolor
	}
	return 0
}

func (m *Npc) GetLuclinbeard() int64 {
	if m != nil {
		return m.Luclinbeard
	}
	return 0
}

func (m *Npc) GetDrakkinheritage() int64 {
	if m != nil {
		return m.Drakkinheritage
	}
	return 0
}

func (m *Npc) GetDrakkintattoo() int64 {
	if m != nil {
		return m.Drakkintattoo
	}
	return 0
}

func (m *Npc) GetDrakkindetails() int64 {
	if m != nil {
		return m.Drakkindetails
	}
	return 0
}

func (m *Npc) GetArmortintid() int64 {
	if m != nil {
		return m.Armortintid
	}
	return 0
}

func (m *Npc) GetArmortintred() int64 {
	if m != nil {
		return m.Armortintred
	}
	return 0
}

func (m *Npc) GetArmortintgreen() int64 {
	if m != nil {
		return m.Armortintgreen
	}
	return 0
}

func (m *Npc) GetArmortintblue() int64 {
	if m != nil {
		return m.Armortintblue
	}
	return 0
}

func (m *Npc) GetDmeleetexture1() int64 {
	if m != nil {
		return m.Dmeleetexture1
	}
	return 0
}

func (m *Npc) GetDmeleetexture2() int64 {
	if m != nil {
		return m.Dmeleetexture2
	}
	return 0
}

func (m *Npc) GetAmmoidfile() string {
	if m != nil {
		return m.Ammoidfile
	}
	return ""
}

func (m *Npc) GetPrimmeleetype() int64 {
	if m != nil {
		return m.Primmeleetype
	}
	return 0
}

func (m *Npc) GetSecmeleetype() int64 {
	if m != nil {
		return m.Secmeleetype
	}
	return 0
}

func (m *Npc) GetRangedtype() int64 {
	if m != nil {
		return m.Rangedtype
	}
	return 0
}

func (m *Npc) GetRunspeed() float32 {
	if m != nil {
		return m.Runspeed
	}
	return 0
}

func (m *Npc) GetMr() int64 {
	if m != nil {
		return m.Mr
	}
	return 0
}

func (m *Npc) GetCr() int64 {
	if m != nil {
		return m.Cr
	}
	return 0
}

func (m *Npc) GetDr() int64 {
	if m != nil {
		return m.Dr
	}
	return 0
}

func (m *Npc) GetFr() int64 {
	if m != nil {
		return m.Fr
	}
	return 0
}

func (m *Npc) GetPr() int64 {
	if m != nil {
		return m.Pr
	}
	return 0
}

func (m *Npc) GetCorrup() int64 {
	if m != nil {
		return m.Corrup
	}
	return 0
}

func (m *Npc) GetPhr() int64 {
	if m != nil {
		return m.Phr
	}
	return 0
}

func (m *Npc) GetSeeinvis() int64 {
	if m != nil {
		return m.Seeinvis
	}
	return 0
}

func (m *Npc) GetSeeinvisundead() int64 {
	if m != nil {
		return m.Seeinvisundead
	}
	return 0
}

func (m *Npc) GetQglobal() int64 {
	if m != nil {
		return m.Qglobal
	}
	return 0
}

func (m *Npc) GetAc() int64 {
	if m != nil {
		return m.Ac
	}
	return 0
}

func (m *Npc) GetNpcaggro() int64 {
	if m != nil {
		return m.Npcaggro
	}
	return 0
}

func (m *Npc) GetSpawnlimit() int64 {
	if m != nil {
		return m.Spawnlimit
	}
	return 0
}

func (m *Npc) GetAttackspeed() float32 {
	if m != nil {
		return m.Attackspeed
	}
	return 0
}

func (m *Npc) GetAttackdelay() int64 {
	if m != nil {
		return m.Attackdelay
	}
	return 0
}

func (m *Npc) GetFindable() int64 {
	if m != nil {
		return m.Findable
	}
	return 0
}

func (m *Npc) GetStr() int64 {
	if m != nil {
		return m.Str
	}
	return 0
}

func (m *Npc) GetSta() int64 {
	if m != nil {
		return m.Sta
	}
	return 0
}

func (m *Npc) GetDex() int64 {
	if m != nil {
		return m.Dex
	}
	return 0
}

func (m *Npc) GetAgi() int64 {
	if m != nil {
		return m.Agi
	}
	return 0
}

func (m *Npc) GetInt() int64 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *Npc) GetWis() int64 {
	if m != nil {
		return m.Wis
	}
	return 0
}

func (m *Npc) GetCha() int64 {
	if m != nil {
		return m.Cha
	}
	return 0
}

func (m *Npc) GetSeehide() int64 {
	if m != nil {
		return m.Seehide
	}
	return 0
}

func (m *Npc) GetSeeimprovedhide() int64 {
	if m != nil {
		return m.Seeimprovedhide
	}
	return 0
}

func (m *Npc) GetTrackable() int64 {
	if m != nil {
		return m.Trackable
	}
	return 0
}

func (m *Npc) GetIsbot() int64 {
	if m != nil {
		return m.Isbot
	}
	return 0
}

func (m *Npc) GetExclude() int64 {
	if m != nil {
		return m.Exclude
	}
	return 0
}

func (m *Npc) GetAtk() int64 {
	if m != nil {
		return m.Atk
	}
	return 0
}

func (m *Npc) GetAccuracy() int64 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *Npc) GetAvoidance() int64 {
	if m != nil {
		return m.Avoidance
	}
	return 0
}

func (m *Npc) GetSlowmitigation() int64 {
	if m != nil {
		return m.Slowmitigation
	}
	return 0
}

func (m *Npc) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Npc) GetMaxlevel() int64 {
	if m != nil {
		return m.Maxlevel
	}
	return 0
}

func (m *Npc) GetScalerate() int64 {
	if m != nil {
		return m.Scalerate
	}
	return 0
}

func (m *Npc) GetPrivatecorpse() int64 {
	if m != nil {
		return m.Privatecorpse
	}
	return 0
}

func (m *Npc) GetUniquespawnbyname() int64 {
	if m != nil {
		return m.Uniquespawnbyname
	}
	return 0
}

func (m *Npc) GetUnderwater() int64 {
	if m != nil {
		return m.Underwater
	}
	return 0
}

func (m *Npc) GetIsquest() int64 {
	if m != nil {
		return m.Isquest
	}
	return 0
}

func (m *Npc) GetEmoteid() int64 {
	if m != nil {
		return m.Emoteid
	}
	return 0
}

func (m *Npc) GetSpellscale() float32 {
	if m != nil {
		return m.Spellscale
	}
	return 0
}

func (m *Npc) GetHealscale() float32 {
	if m != nil {
		return m.Healscale
	}
	return 0
}

func (m *Npc) GetNotargethotkey() int64 {
	if m != nil {
		return m.Notargethotkey
	}
	return 0
}

func (m *Npc) GetRaidtarget() int64 {
	if m != nil {
		return m.Raidtarget
	}
	return 0
}

func (m *Npc) GetArmtexture() int64 {
	if m != nil {
		return m.Armtexture
	}
	return 0
}

func (m *Npc) GetBracertexture() int64 {
	if m != nil {
		return m.Bracertexture
	}
	return 0
}

func (m *Npc) GetHandtexture() int64 {
	if m != nil {
		return m.Handtexture
	}
	return 0
}

func (m *Npc) GetLegtexture() int64 {
	if m != nil {
		return m.Legtexture
	}
	return 0
}

func (m *Npc) GetFeettexture() int64 {
	if m != nil {
		return m.Feettexture
	}
	return 0
}

func (m *Npc) GetLight() int64 {
	if m != nil {
		return m.Light
	}
	return 0
}

func (m *Npc) GetWalkspeed() int64 {
	if m != nil {
		return m.Walkspeed
	}
	return 0
}

func (m *Npc) GetPeqid() int64 {
	if m != nil {
		return m.Peqid
	}
	return 0
}

func (m *Npc) GetUnique() int64 {
	if m != nil {
		return m.Unique
	}
	return 0
}

func (m *Npc) GetFixed() int64 {
	if m != nil {
		return m.Fixed
	}
	return 0
}

func (m *Npc) GetIgnoredespawn() int64 {
	if m != nil {
		return m.Ignoredespawn
	}
	return 0
}

func (m *Npc) GetShowname() int64 {
	if m != nil {
		return m.Showname
	}
	return 0
}

func (m *Npc) GetUntargetable() int64 {
	if m != nil {
		return m.Untargetable
	}
	return 0
}

func (m *Npc) GetCharmac() int64 {
	if m != nil {
		return m.Charmac
	}
	return 0
}

func (m *Npc) GetCharmmindmg() int64 {
	if m != nil {
		return m.Charmmindmg
	}
	return 0
}

func (m *Npc) GetCharmmaxdmg() int64 {
	if m != nil {
		return m.Charmmaxdmg
	}
	return 0
}

func (m *Npc) GetCharmattackdelay() int64 {
	if m != nil {
		return m.Charmattackdelay
	}
	return 0
}

func (m *Npc) GetCharmaccuracyrating() int64 {
	if m != nil {
		return m.Charmaccuracyrating
	}
	return 0
}

func (m *Npc) GetCharmavoidancerating() int64 {
	if m != nil {
		return m.Charmavoidancerating
	}
	return 0
}

func (m *Npc) GetCharmatk() int64 {
	if m != nil {
		return m.Charmatk
	}
	return 0
}

func (m *Npc) GetSkipgloballoot() int64 {
	if m != nil {
		return m.Skipgloballoot
	}
	return 0
}

func (m *Npc) GetRarespawn() int64 {
	if m != nil {
		return m.Rarespawn
	}
	return 0
}

func (m *Npc) GetStuckbehavior() int64 {
	if m != nil {
		return m.Stuckbehavior
	}
	return 0
}

func (m *Npc) GetCleanname() string {
	if m != nil {
		return m.Cleanname
	}
	return ""
}

func (m *Npc) GetModel() int64 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *Npc) GetFlymode() int64 {
	if m != nil {
		return m.Flymode
	}
	return 0
}

func init() {
	proto.RegisterType((*Npc)(nil), "pb.Npc")
}

func init() {
	proto.RegisterFile("proto/npc.proto", fileDescriptor_8ae1f6e76b0ace78)
}

var fileDescriptor_8ae1f6e76b0ace78 = []byte{
	// 1529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x97, 0x69, 0x7b, 0xdc, 0xb6,
	0x11, 0xc7, 0x1f, 0x49, 0x89, 0x1d, 0x33, 0x89, 0xad, 0x30, 0x6e, 0x3a, 0x4d, 0x93, 0x54, 0x75,
	0x53, 0x57, 0x75, 0x5d, 0x1f, 0x72, 0xef, 0xfb, 0xbe, 0xeb, 0xb6, 0x72, 0xef, 0x1b, 0x0b, 0xcc,
	0x92, 0xe8, 0x82, 0x20, 0x05, 0x80, 0xbb, 0x5a, 0xb7, 0xdf, 0xa6, 0x5f, 0x34, 0xcf, 0xcc, 0x80,
	0x4b, 0x72, 0xa5, 0x77, 0xfc, 0xff, 0x30, 0x8b, 0x01, 0x06, 0x83, 0xc1, 0x6c, 0x71, 0xa7, 0x0b,
	0x6d, 0x6a, 0x1f, 0xfb, 0x4e, 0x3f, 0xe2, 0xaf, 0xf2, 0xb0, 0x5b, 0xdc, 0xfb, 0xff, 0xfb, 0xc5,
	0xd1, 0xf3, 0x4e, 0x97, 0xb7, 0x8b, 0x43, 0x6b, 0xe0, 0xe0, 0xe4, 0xe0, 0xf4, 0xe8, 0xfc, 0xd0,
	0x9a, 0xb2, 0x2c, 0x5e, 0xf1, 0xaa, 0x41, 0x38, 0x3c, 0x39, 0x38, 0xbd, 0x75, 0xce, 0xdf, 0xe5,
	0xbb, 0xc5, 0x6b, 0x4e, 0xc5, 0xc4, 0xfc, 0x88, 0xf9, 0x4e, 0x97, 0x77, 0x8b, 0x57, 0x1d, 0xae,
	0xd1, 0xc1, 0x2b, 0x3c, 0x85, 0x08, 0x9a, 0x25, 0x28, 0x8d, 0xf0, 0x2a, 0x43, 0xfe, 0x26, 0x4b,
	0xed, 0x54, 0x8c, 0x70, 0x43, 0x2c, 0x59, 0xd0, 0xdc, 0x8b, 0xd6, 0x6c, 0xd3, 0xb6, 0x43, 0xb8,
	0xc9, 0x03, 0x3b, 0x4d, 0x6b, 0xab, 0x3b, 0x78, 0x4d, 0xd6, 0x56, 0x77, 0x34, 0x6b, 0xa3, 0xbc,
	0x82, 0x5b, 0x32, 0x2b, 0x7d, 0x97, 0xef, 0x14, 0x37, 0x2a, 0xf4, 0x06, 0x03, 0x14, 0x4c, 0xb3,
	0x2a, 0xa1, 0xb8, 0x99, 0xf0, 0x32, 0xf5, 0x01, 0xe1, 0x75, 0x1e, 0x18, 0x64, 0x79, 0x52, 0xbc,
	0x5e, 0xa3, 0x6b, 0x86, 0xd1, 0x37, 0x78, 0x74, 0x8a, 0xca, 0xd3, 0xe2, 0x4e, 0x8d, 0xa1, 0x8d,
	0xcb, 0x36, 0x54, 0xd8, 0xb4, 0x06, 0x1d, 0xbc, 0xc9, 0x56, 0xfb, 0x98, 0x56, 0x14, 0xed, 0x4b,
	0x84, 0xdb, 0x27, 0x07, 0xa7, 0x87, 0xe7, 0xfc, 0xcd, 0xf3, 0x77, 0x01, 0x2b, 0xf4, 0x41, 0x25,
	0x84, 0x3b, 0x79, 0xfe, 0x11, 0x95, 0x1f, 0x16, 0x6f, 0xd2, 0xda, 0x47, 0x9b, 0x63, 0xb6, 0x99,
	0x43, 0x9a, 0xc7, 0xb5, 0x6d, 0x4a, 0x6a, 0xe1, 0xd0, 0x1a, 0x78, 0x4b, 0xe6, 0x99, 0xa0, 0xf2,
	0x83, 0xa2, 0x68, 0x30, 0xe8, 0x5a, 0xf9, 0x64, 0x0d, 0x94, 0x6c, 0x30, 0x21, 0xe4, 0x47, 0xb9,
	0xa4, 0xfb, 0x10, 0xd0, 0xeb, 0xad, 0x35, 0xf0, 0xb6, 0xf8, 0x99, 0x41, 0xf2, 0xe3, 0x3b, 0x1d,
	0x3b, 0x74, 0x2e, 0x5a, 0x03, 0x77, 0xc5, 0xcf, 0x04, 0x95, 0x8f, 0x8a, 0x72, 0x27, 0x71, 0xb9,
	0x44, 0x9d, 0xc8, 0xf0, 0x63, 0x6c, 0x78, 0xcd, 0x48, 0x79, 0xaf, 0x78, 0xc3, 0x77, 0x7a, 0xa9,
	0x74, 0xb2, 0xad, 0xb7, 0x06, 0xde, 0x61, 0xcb, 0x19, 0x2b, 0x9f, 0x14, 0x6f, 0x2b, 0xb3, 0x46,
	0x4f, 0x01, 0x4f, 0xd8, 0x74, 0x4e, 0x25, 0xda, 0xe5, 0xc7, 0xd9, 0xf4, 0xba, 0x21, 0x9a, 0x35,
	0x05, 0xd5, 0x0d, 0x04, 0x40, 0x66, 0x9d, 0x32, 0xca, 0x86, 0xc6, 0x7a, 0xd3, 0x54, 0xf0, 0x09,
	0xc9, 0x06, 0x51, 0xcc, 0xd5, 0x25, 0xf1, 0x77, 0x33, 0x67, 0x45, 0x7b, 0x57, 0x29, 0x29, 0xbd,
	0xd2, 0x6d, 0xef, 0x13, 0x7c, 0x52, 0xf6, 0x3e, 0x41, 0x94, 0x0b, 0xcf, 0x79, 0x87, 0xda, 0x2a,
	0xa7, 0x52, 0x5a, 0x45, 0x78, 0x8f, 0xaf, 0xc0, 0x3e, 0x2e, 0x1f, 0x14, 0xc7, 0x2f, 0xb2, 0x5e,
	0x58, 0x67, 0x93, 0xc5, 0x08, 0xef, 0xb3, 0xe9, 0x15, 0xce, 0x7e, 0xab, 0x2a, 0xb4, 0x41, 0x19,
	0xdb, 0x47, 0xf8, 0x20, 0xfb, 0x1d, 0x11, 0xed, 0x56, 0xc5, 0x68, 0x63, 0xca, 0x26, 0x9f, 0x92,
	0xdd, 0x4e, 0x19, 0x65, 0xdf, 0x92, 0x6e, 0xd9, 0x89, 0xdc, 0x07, 0xfa, 0xa6, 0xf5, 0xba, 0x5e,
	0x3b, 0xeb, 0x6b, 0x65, 0x43, 0x4c, 0x5b, 0x87, 0xf0, 0x69, 0xc9, 0xdd, 0x3d, 0x3c, 0xb7, 0xd4,
	0xad, 0x6b, 0x03, 0xdc, 0xdb, 0xb7, 0x64, 0x5c, 0xde, 0x2f, 0x6e, 0x0b, 0xc2, 0x2d, 0x8a, 0xe1,
	0x67, 0xd8, 0x70, 0x8f, 0x8e, 0x33, 0x0e, 0xe4, 0x0c, 0x3e, 0x9c, 0xce, 0xb8, 0xc3, 0x14, 0x2b,
	0x41, 0x0b, 0x54, 0xc1, 0xc8, 0x9c, 0x9f, 0x65, 0xd3, 0x2b, 0x9c, 0xef, 0xc1, 0xc8, 0xe0, 0x7e,
	0xbe, 0x07, 0x23, 0x22, 0xbf, 0x26, 0xa8, 0xd5, 0xca, 0xfa, 0x1a, 0x83, 0x4d, 0xaa, 0x42, 0xf8,
	0x9c, 0xf8, 0xdd, 0xc3, 0x74, 0x23, 0x32, 0x4a, 0x2a, 0xa5, 0xb6, 0x85, 0x53, 0xb9, 0x11, 0x33,
	0x48, 0xfb, 0xcd, 0xc0, 0x60, 0x52, 0xd6, 0x45, 0xf8, 0xbc, 0xec, 0x77, 0x4e, 0xf9, 0x14, 0x43,
	0xd3, 0x86, 0x64, 0xf9, 0x02, 0x3e, 0xc8, 0xa7, 0x38, 0x22, 0x3e, 0xc5, 0x41, 0x06, 0x34, 0xf0,
	0x85, 0x7c, 0x8a, 0x13, 0x46, 0xde, 0x76, 0xba, 0x0a, 0x88, 0x1e, 0x1e, 0x8a, 0xb7, 0x39, 0xe5,
	0xdb, 0x3c, 0x90, 0x85, 0xeb, 0x11, 0xbe, 0x98, 0x6f, 0xf3, 0x14, 0xf2, 0xda, 0x1b, 0x74, 0x88,
	0xb9, 0x98, 0x3d, 0x85, 0x47, 0x79, 0xed, 0x33, 0x7a, 0xc5, 0xee, 0x0c, 0x1e, 0x5f, 0x63, 0x77,
	0x46, 0x35, 0x46, 0x35, 0x4d, 0x6b, 0xcd, 0xd2, 0x3a, 0x84, 0x27, 0x9c, 0xcf, 0x13, 0x42, 0xab,
	0xea, 0x82, 0x6d, 0xe4, 0x47, 0x54, 0xc4, 0x9f, 0xca, 0xaa, 0x66, 0x90, 0xe2, 0x10, 0x51, 0x8f,
	0x46, 0x67, 0x12, 0x87, 0x29, 0x23, 0x4f, 0x41, 0xf9, 0x0a, 0x0d, 0x5b, 0x3c, 0x93, 0x6a, 0x36,
	0x12, 0x7a, 0x29, 0x42, 0xef, 0x63, 0x87, 0x68, 0xe0, 0x4b, 0x5c, 0x6f, 0x77, 0x9a, 0x5e, 0x8a,
	0x26, 0xc0, 0x97, 0xe5, 0xa5, 0x68, 0x02, 0x69, 0x1d, 0xe0, 0x2b, 0xa2, 0x35, 0x6b, 0x13, 0xe0,
	0xab, 0xa2, 0x0d, 0xeb, 0x65, 0x80, 0xaf, 0x89, 0x5e, 0xb2, 0xee, 0x02, 0x7c, 0x5d, 0x74, 0x17,
	0xa8, 0x5e, 0xe8, 0x36, 0x84, 0xbe, 0x83, 0x6f, 0x48, 0xbd, 0x10, 0x55, 0x1e, 0x17, 0x47, 0x5d,
	0x1d, 0xe0, 0x9b, 0x0c, 0xe9, 0x93, 0x56, 0x15, 0x11, 0xad, 0x5f, 0xdb, 0x08, 0xdf, 0x92, 0xf7,
	0x6b, 0xd0, 0x14, 0xe3, 0xe1, 0xbb, 0xf7, 0x06, 0x95, 0x81, 0x6f, 0x4b, 0x8c, 0xe7, 0x94, 0xde,
	0xaa, 0x8b, 0xca, 0xb5, 0x0b, 0xe5, 0xe0, 0x3b, 0xf2, 0x56, 0x65, 0x49, 0xeb, 0x52, 0x1a, 0xbe,
	0x2b, 0xeb, 0x52, 0x9a, 0xbc, 0xf9, 0x4e, 0x73, 0x9d, 0x80, 0xef, 0x89, 0xb7, 0x41, 0x53, 0xfc,
	0x62, 0xa7, 0x36, 0xde, 0xd9, 0xc6, 0x26, 0xf8, 0xbe, 0xc4, 0x6f, 0x24, 0x63, 0xad, 0x93, 0x10,
	0xfe, 0x80, 0x43, 0x38, 0x45, 0xa3, 0x85, 0x41, 0xa7, 0xb6, 0xf0, 0xc3, 0x69, 0x35, 0x64, 0x44,
	0xfe, 0x97, 0xd6, 0x1b, 0x7a, 0x7f, 0xe0, 0x47, 0xe2, 0x7f, 0xd0, 0x14, 0x9b, 0x98, 0x02, 0xfc,
	0x58, 0x62, 0x13, 0x53, 0x10, 0xa2, 0xe0, 0x27, 0x03, 0x51, 0x44, 0x0c, 0x5e, 0xc2, 0x4f, 0x85,
	0x18, 0xbc, 0x24, 0xa2, 0x2a, 0x0b, 0x3f, 0x13, 0xa2, 0x2a, 0x4b, 0xc4, 0xfa, 0x04, 0x3f, 0x17,
	0x62, 0x7d, 0x22, 0xb2, 0xb1, 0x11, 0x7e, 0x21, 0x64, 0x63, 0x23, 0x11, 0x5d, 0x2b, 0xf8, 0xa5,
	0x10, 0x5d, 0x2b, 0x8a, 0x61, 0x44, 0xac, 0xad, 0x41, 0xf8, 0x95, 0xc4, 0x30, 0x4b, 0xaa, 0x0e,
	0x14, 0xef, 0xa6, 0x0b, 0xed, 0x1a, 0x0d, 0x5b, 0xfc, 0x5a, 0xaa, 0xc3, 0x1e, 0x2e, 0xdf, 0x2b,
	0x6e, 0xa5, 0xa0, 0xf4, 0x8a, 0xb7, 0xf7, 0x9c, 0x6d, 0x46, 0x40, 0xfd, 0x8b, 0x8d, 0x8b, 0x36,
	0xc1, 0x6f, 0xa4, 0x7f, 0x61, 0x41, 0x7e, 0xf1, 0x52, 0xbb, 0xde, 0x20, 0xfc, 0x56, 0xfc, 0x66,
	0xc9, 0x3b, 0x4b, 0x2b, 0xf8, 0x5d, 0xde, 0x59, 0x5a, 0x51, 0xf4, 0x94, 0xd6, 0x7d, 0x50, 0x7a,
	0x0b, 0xe7, 0x12, 0xbd, 0x41, 0x93, 0x6f, 0xb5, 0x6e, 0xad, 0x51, 0x5e, 0x23, 0xbc, 0x10, 0xdf,
	0x3b, 0xc0, 0x99, 0xe4, 0xda, 0x4d, 0x63, 0x93, 0xad, 0x14, 0xbd, 0xa0, 0xf0, 0xfb, 0x9c, 0x49,
	0x33, 0x4a, 0xab, 0x59, 0x63, 0x88, 0x64, 0xf0, 0x07, 0x59, 0x4d, 0x96, 0xe4, 0xbb, 0x51, 0x97,
	0xd2, 0xaa, 0xfd, 0x51, 0x7c, 0x0f, 0x9a, 0x7c, 0x47, 0xad, 0x1c, 0x72, 0x2f, 0xf2, 0x27, 0xf1,
	0xbd, 0x03, 0xf9, 0x86, 0xaf, 0x55, 0x42, 0xdd, 0x86, 0x2e, 0x22, 0xfc, 0x79, 0x77, 0xc3, 0x47,
	0x58, 0x3e, 0x2c, 0xde, 0xea, 0xbd, 0xbd, 0xe8, 0x91, 0x33, 0x6e, 0xb1, 0xe5, 0x66, 0xf1, 0x2f,
	0x6c, 0x79, 0x75, 0x80, 0x72, 0x95, 0x72, 0x3f, 0x6c, 0x54, 0xc2, 0x00, 0x7f, 0x95, 0x5c, 0x1d,
	0x09, 0xed, 0xc3, 0x46, 0xfa, 0x4d, 0x82, 0xbf, 0xc9, 0x3e, 0xb2, 0xe4, 0x78, 0x37, 0x2d, 0xf7,
	0x0a, 0x7f, 0xcf, 0xf1, 0x16, 0x29, 0xf9, 0x4f, 0x8d, 0x08, 0xad, 0x1c, 0xfe, 0xc1, 0xe9, 0x3d,
	0x21, 0xb4, 0xcb, 0x1a, 0x55, 0x1e, 0xfe, 0x27, 0x0f, 0x8f, 0x80, 0x22, 0xec, 0xdb, 0xa4, 0x42,
	0x85, 0xa9, 0x6e, 0xd3, 0x0a, 0xb7, 0xf0, 0x2f, 0x89, 0xf0, 0x9c, 0x4a, 0x95, 0xb2, 0x46, 0x18,
	0xfc, 0x7b, 0xa8, 0x52, 0x03, 0xe1, 0x7a, 0x19, 0x76, 0xcd, 0xa5, 0x92, 0xf1, 0x91, 0x50, 0x34,
	0x17, 0xd4, 0x0e, 0x87, 0xc1, 0x64, 0x21, 0xd1, 0x9c, 0x41, 0xee, 0x21, 0x95, 0x37, 0x83, 0x8d,
	0xce, 0x3d, 0xe4, 0x88, 0xc8, 0x8f, 0xc3, 0x6a, 0x30, 0x30, 0xe2, 0x67, 0x24, 0x34, 0xc3, 0x12,
	0x31, 0x0d, 0x06, 0x28, 0x33, 0x4c, 0x10, 0x77, 0xee, 0xb6, 0xaa, 0x13, 0x2c, 0x73, 0xe7, 0x4e,
	0x82, 0xa2, 0xb4, 0x51, 0x2e, 0xd7, 0x88, 0x4a, 0x72, 0x61, 0x07, 0xe8, 0x37, 0x1d, 0x5e, 0x58,
	0x03, 0xb5, 0xfc, 0x86, 0x05, 0x55, 0x4b, 0x39, 0x62, 0xb0, 0x52, 0x2d, 0x45, 0x91, 0xf5, 0xd2,
	0x5e, 0xa2, 0x81, 0xff, 0x88, 0x35, 0x0b, 0x8a, 0x80, 0xad, 0x7c, 0x1b, 0xd0, 0x48, 0x4a, 0xc0,
	0x4a, 0x22, 0x30, 0x83, 0x5c, 0x57, 0xeb, 0x76, 0xc3, 0x69, 0xe4, 0x72, 0x5d, 0xcd, 0x9a, 0x5e,
	0x93, 0xde, 0x4b, 0xbc, 0xf9, 0xaa, 0x36, 0xf2, 0x9a, 0x4c, 0x19, 0xe5, 0x89, 0xae, 0x55, 0x68,
	0x94, 0x06, 0x2f, 0x79, 0x92, 0x25, 0x45, 0x86, 0x3f, 0x73, 0xa3, 0xd8, 0x4a, 0x64, 0x26, 0x68,
	0xb4, 0x90, 0x96, 0xb1, 0x9b, 0x5a, 0x48, 0xdf, 0xf8, 0xa0, 0x38, 0x96, 0xe9, 0x26, 0xe5, 0xf2,
	0x42, 0xfa, 0x97, 0x7d, 0x4e, 0x9d, 0x6e, 0x76, 0x2d, 0x57, 0x3d, 0xa8, 0x64, 0x7d, 0x05, 0x41,
	0x3a, 0xdd, 0x6b, 0x86, 0xca, 0xb3, 0xe2, 0xae, 0xe0, 0xe1, 0xfe, 0xe7, 0x9f, 0x44, 0xfe, 0xc9,
	0xb5, 0x63, 0x14, 0xaf, 0xec, 0x79, 0x05, 0x49, 0xe2, 0x35, 0x68, 0xae, 0x1e, 0x2b, 0xdb, 0xc9,
	0x9b, 0x42, 0x7f, 0x20, 0xa0, 0xcf, 0xd5, 0x63, 0x46, 0xe9, 0xec, 0x83, 0x0a, 0xf9, 0x54, 0xd6,
	0x72, 0xf6, 0x3b, 0x40, 0xe7, 0x16, 0x53, 0xaf, 0x57, 0x0b, 0xac, 0xd5, 0xda, 0xb6, 0x01, 0x36,
	0x72, 0x6e, 0x33, 0x48, 0x73, 0x68, 0x87, 0xca, 0xf3, 0xc1, 0xbd, 0xe4, 0x76, 0x61, 0x04, 0x94,
	0x11, 0xf2, 0x7f, 0xea, 0xbf, 0x92, 0x11, 0xf2, 0x2f, 0x0a, 0x8a, 0x9b, 0x4b, 0xb7, 0xa5, 0x6f,
	0xf8, 0x9f, 0x9c, 0x55, 0x96, 0x8b, 0x1b, 0xfc, 0x87, 0xf5, 0xd9, 0x47, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xf2, 0x90, 0x85, 0x8f, 0xc3, 0x0e, 0x00, 0x00,
}
