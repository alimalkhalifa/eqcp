// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/npc.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Npc struct {
	ID                   int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	LastName             string  `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Level                int64   `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	RaceID               int64   `protobuf:"varint,5,opt,name=RaceID,proto3" json:"RaceID,omitempty"`
	ClassID              int64   `protobuf:"varint,6,opt,name=ClassID,proto3" json:"ClassID,omitempty"`
	BodyTypeID           int64   `protobuf:"varint,7,opt,name=BodyTypeID,proto3" json:"BodyTypeID,omitempty"`
	Hitpoints            int64   `protobuf:"varint,8,opt,name=Hitpoints,proto3" json:"Hitpoints,omitempty"`
	Mana                 int64   `protobuf:"varint,9,opt,name=Mana,proto3" json:"Mana,omitempty"`
	Gender               int64   `protobuf:"varint,10,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Texture              int64   `protobuf:"varint,11,opt,name=Texture,proto3" json:"Texture,omitempty"`
	HelmTexture          int64   `protobuf:"varint,12,opt,name=HelmTexture,proto3" json:"HelmTexture,omitempty"`
	HerosForgeModel      int64   `protobuf:"varint,13,opt,name=HerosForgeModel,proto3" json:"HerosForgeModel,omitempty"`
	Size                 float32 `protobuf:"fixed32,14,opt,name=Size,proto3" json:"Size,omitempty"`
	HpRegenRate          int64   `protobuf:"varint,15,opt,name=HpRegenRate,proto3" json:"HpRegenRate,omitempty"`
	ManaRegenRate        int64   `protobuf:"varint,16,opt,name=ManaRegenRate,proto3" json:"ManaRegenRate,omitempty"`
	LootID               int64   `protobuf:"varint,17,opt,name=LootID,proto3" json:"LootID,omitempty"`
	MerchantID           int64   `protobuf:"varint,18,opt,name=MerchantID,proto3" json:"MerchantID,omitempty"`
	AltCurrencyID        int64   `protobuf:"varint,19,opt,name=AltCurrencyID,proto3" json:"AltCurrencyID,omitempty"`
	NpcSpellsID          int64   `protobuf:"varint,20,opt,name=NpcSpellsID,proto3" json:"NpcSpellsID,omitempty"`
	NpcSpellsEffectsID   int64   `protobuf:"varint,21,opt,name=NpcSpellsEffectsID,proto3" json:"NpcSpellsEffectsID,omitempty"`
	NpcFactionID         int64   `protobuf:"varint,22,opt,name=NpcFactionID,proto3" json:"NpcFactionID,omitempty"`
	AdventureTemplateID  int64   `protobuf:"varint,23,opt,name=AdventureTemplateID,proto3" json:"AdventureTemplateID,omitempty"`
	TrapTemplate         int64   `protobuf:"varint,24,opt,name=TrapTemplate,proto3" json:"TrapTemplate,omitempty"`
	MininumDamage        int64   `protobuf:"varint,25,opt,name=MininumDamage,proto3" json:"MininumDamage,omitempty"`
	MaximumDamage        int64   `protobuf:"varint,26,opt,name=MaximumDamage,proto3" json:"MaximumDamage,omitempty"`
	AttackCount          int64   `protobuf:"varint,27,opt,name=AttackCount,proto3" json:"AttackCount,omitempty"`
	NpcSpecialAttacks    string  `protobuf:"bytes,28,opt,name=NpcSpecialAttacks,proto3" json:"NpcSpecialAttacks,omitempty"`
	SpecialAbilitiesRaw  string  `protobuf:"bytes,29,opt,name=SpecialAbilitiesRaw,proto3" json:"SpecialAbilitiesRaw,omitempty"`
	AggroRadius          int64   `protobuf:"varint,30,opt,name=AggroRadius,proto3" json:"AggroRadius,omitempty"`
	AssistRadius         int64   `protobuf:"varint,31,opt,name=AssistRadius,proto3" json:"AssistRadius,omitempty"`
	Face                 int64   `protobuf:"varint,32,opt,name=Face,proto3" json:"Face,omitempty"`
	LuclinHairStyle      int64   `protobuf:"varint,33,opt,name=LuclinHairStyle,proto3" json:"LuclinHairStyle,omitempty"`
	LuclinHairColor      int64   `protobuf:"varint,34,opt,name=LuclinHairColor,proto3" json:"LuclinHairColor,omitempty"`
	LuclinEyeColor       int64   `protobuf:"varint,35,opt,name=LuclinEyeColor,proto3" json:"LuclinEyeColor,omitempty"`
	LuclinEyeColor2      int64   `protobuf:"varint,36,opt,name=LuclinEyeColor2,proto3" json:"LuclinEyeColor2,omitempty"`
	LuclinBeardColor     int64   `protobuf:"varint,37,opt,name=LuclinBeardColor,proto3" json:"LuclinBeardColor,omitempty"`
	LuclinBeard          int64   `protobuf:"varint,38,opt,name=LuclinBeard,proto3" json:"LuclinBeard,omitempty"`
	DrakkinHeritage      int64   `protobuf:"varint,39,opt,name=DrakkinHeritage,proto3" json:"DrakkinHeritage,omitempty"`
	DrakkinTattoo        int64   `protobuf:"varint,40,opt,name=DrakkinTattoo,proto3" json:"DrakkinTattoo,omitempty"`
	DrakkinDetails       int64   `protobuf:"varint,41,opt,name=DrakkinDetails,proto3" json:"DrakkinDetails,omitempty"`
	ArmorTintID          int64   `protobuf:"varint,42,opt,name=ArmorTintID,proto3" json:"ArmorTintID,omitempty"`
	ArmorTintRed         int64   `protobuf:"varint,43,opt,name=ArmorTintRed,proto3" json:"ArmorTintRed,omitempty"`
	ArmorTintGreen       int64   `protobuf:"varint,44,opt,name=ArmorTintGreen,proto3" json:"ArmorTintGreen,omitempty"`
	ArmorTintBlue        int64   `protobuf:"varint,45,opt,name=ArmorTintBlue,proto3" json:"ArmorTintBlue,omitempty"`
	DMeleeTexture1       int64   `protobuf:"varint,46,opt,name=DMeleeTexture1,proto3" json:"DMeleeTexture1,omitempty"`
	DMeleeTexture2       int64   `protobuf:"varint,47,opt,name=DMeleeTexture2,proto3" json:"DMeleeTexture2,omitempty"`
	AmmoIDFile           string  `protobuf:"bytes,48,opt,name=AmmoIDFile,proto3" json:"AmmoIDFile,omitempty"`
	PrimaryMeleeTypeID   int64   `protobuf:"varint,49,opt,name=PrimaryMeleeTypeID,proto3" json:"PrimaryMeleeTypeID,omitempty"`
	SecondaryMeleeTypeID int64   `protobuf:"varint,50,opt,name=SecondaryMeleeTypeID,proto3" json:"SecondaryMeleeTypeID,omitempty"`
	RangedTypeID         int64   `protobuf:"varint,51,opt,name=RangedTypeID,proto3" json:"RangedTypeID,omitempty"`
	Runspeed             float32 `protobuf:"fixed32,52,opt,name=Runspeed,proto3" json:"Runspeed,omitempty"`
	MagicResistance      int64   `protobuf:"varint,53,opt,name=MagicResistance,proto3" json:"MagicResistance,omitempty"`
	ColdResistance       int64   `protobuf:"varint,54,opt,name=ColdResistance,proto3" json:"ColdResistance,omitempty"`
	DiseaseResistance    int64   `protobuf:"varint,55,opt,name=DiseaseResistance,proto3" json:"DiseaseResistance,omitempty"`
	FireResistance       int64   `protobuf:"varint,56,opt,name=FireResistance,proto3" json:"FireResistance,omitempty"`
	PoisonResistance     int64   `protobuf:"varint,57,opt,name=PoisonResistance,proto3" json:"PoisonResistance,omitempty"`
	CorruptionResistance int64   `protobuf:"varint,58,opt,name=CorruptionResistance,proto3" json:"CorruptionResistance,omitempty"`
	PhysicalResistance   int64   `protobuf:"varint,59,opt,name=PhysicalResistance,proto3" json:"PhysicalResistance,omitempty"`
	SeeInvisible         int64   `protobuf:"varint,60,opt,name=SeeInvisible,proto3" json:"SeeInvisible,omitempty"`
	SeeInvisibleUndead   int64   `protobuf:"varint,61,opt,name=SeeInvisibleUndead,proto3" json:"SeeInvisibleUndead,omitempty"`
	QuestGlobal          int64   `protobuf:"varint,62,opt,name=QuestGlobal,proto3" json:"QuestGlobal,omitempty"`
	ArmorClass           int64   `protobuf:"varint,63,opt,name=ArmorClass,proto3" json:"ArmorClass,omitempty"`
	NpcAggro             int64   `protobuf:"varint,64,opt,name=NpcAggro,proto3" json:"NpcAggro,omitempty"`
	SpawnLimit           int64   `protobuf:"varint,65,opt,name=SpawnLimit,proto3" json:"SpawnLimit,omitempty"`
	AttackSpeed          float32 `protobuf:"fixed32,66,opt,name=AttackSpeed,proto3" json:"AttackSpeed,omitempty"`
	AttackDelay          int64   `protobuf:"varint,67,opt,name=AttackDelay,proto3" json:"AttackDelay,omitempty"`
	Findable             int64   `protobuf:"varint,68,opt,name=Findable,proto3" json:"Findable,omitempty"`
	Strength             int64   `protobuf:"varint,69,opt,name=Strength,proto3" json:"Strength,omitempty"`
	Stamina              int64   `protobuf:"varint,70,opt,name=Stamina,proto3" json:"Stamina,omitempty"`
	Dexterity            int64   `protobuf:"varint,71,opt,name=Dexterity,proto3" json:"Dexterity,omitempty"`
	Agility              int64   `protobuf:"varint,72,opt,name=Agility,proto3" json:"Agility,omitempty"`
	Intelligence         int64   `protobuf:"varint,73,opt,name=Intelligence,proto3" json:"Intelligence,omitempty"`
	Wisdom               int64   `protobuf:"varint,74,opt,name=Wisdom,proto3" json:"Wisdom,omitempty"`
	Charisma             int64   `protobuf:"varint,75,opt,name=Charisma,proto3" json:"Charisma,omitempty"`
	SeeHide              int64   `protobuf:"varint,76,opt,name=SeeHide,proto3" json:"SeeHide,omitempty"`
	SeeImprovedHide      int64   `protobuf:"varint,77,opt,name=SeeImprovedHide,proto3" json:"SeeImprovedHide,omitempty"`
	Trackable            int64   `protobuf:"varint,78,opt,name=Trackable,proto3" json:"Trackable,omitempty"`
	IsBot                int64   `protobuf:"varint,79,opt,name=IsBot,proto3" json:"IsBot,omitempty"`
	Exclude              int64   `protobuf:"varint,80,opt,name=Exclude,proto3" json:"Exclude,omitempty"`
	Attack               int64   `protobuf:"varint,81,opt,name=Attack,proto3" json:"Attack,omitempty"`
	Accuracy             int64   `protobuf:"varint,82,opt,name=Accuracy,proto3" json:"Accuracy,omitempty"`
	Avoidance            int64   `protobuf:"varint,83,opt,name=Avoidance,proto3" json:"Avoidance,omitempty"`
	SlowMitigation       int64   `protobuf:"varint,84,opt,name=SlowMitigation,proto3" json:"SlowMitigation,omitempty"`
	Version              int64   `protobuf:"varint,85,opt,name=Version,proto3" json:"Version,omitempty"`
	MaxLevel             int64   `protobuf:"varint,86,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	ScaleRate            int64   `protobuf:"varint,87,opt,name=ScaleRate,proto3" json:"ScaleRate,omitempty"`
	PrivateCorpse        int64   `protobuf:"varint,88,opt,name=PrivateCorpse,proto3" json:"PrivateCorpse,omitempty"`
	UniqueSpawnByName    int64   `protobuf:"varint,89,opt,name=UniqueSpawnByName,proto3" json:"UniqueSpawnByName,omitempty"`
	Underwater           int64   `protobuf:"varint,90,opt,name=Underwater,proto3" json:"Underwater,omitempty"`
	IsQuest              int64   `protobuf:"varint,91,opt,name=IsQuest,proto3" json:"IsQuest,omitempty"`
	EmoteID              int64   `protobuf:"varint,92,opt,name=EmoteID,proto3" json:"EmoteID,omitempty"`
	SpellScale           float32 `protobuf:"fixed32,93,opt,name=SpellScale,proto3" json:"SpellScale,omitempty"`
	HealScale            float32 `protobuf:"fixed32,94,opt,name=HealScale,proto3" json:"HealScale,omitempty"`
	NoTargetHotkey       int64   `protobuf:"varint,95,opt,name=NoTargetHotkey,proto3" json:"NoTargetHotkey,omitempty"`
	RaidTarget           int64   `protobuf:"varint,96,opt,name=RaidTarget,proto3" json:"RaidTarget,omitempty"`
	ArmTexture           int64   `protobuf:"varint,97,opt,name=ArmTexture,proto3" json:"ArmTexture,omitempty"`
	BracerTexture        int64   `protobuf:"varint,98,opt,name=BracerTexture,proto3" json:"BracerTexture,omitempty"`
	HandTexture          int64   `protobuf:"varint,99,opt,name=HandTexture,proto3" json:"HandTexture,omitempty"`
	LegTexture           int64   `protobuf:"varint,100,opt,name=LegTexture,proto3" json:"LegTexture,omitempty"`
	FeetTexture          int64   `protobuf:"varint,101,opt,name=FeetTexture,proto3" json:"FeetTexture,omitempty"`
	Light                int64   `protobuf:"varint,102,opt,name=Light,proto3" json:"Light,omitempty"`
	WalkSpeed            int64   `protobuf:"varint,103,opt,name=WalkSpeed,proto3" json:"WalkSpeed,omitempty"`
	PeqID                int64   `protobuf:"varint,104,opt,name=PeqID,proto3" json:"PeqID,omitempty"`
	Unique               int64   `protobuf:"varint,105,opt,name=Unique,proto3" json:"Unique,omitempty"`
	Fixed                int64   `protobuf:"varint,106,opt,name=Fixed,proto3" json:"Fixed,omitempty"`
	IgnoreDespawn        int64   `protobuf:"varint,107,opt,name=IgnoreDespawn,proto3" json:"IgnoreDespawn,omitempty"`
	ShowName             int64   `protobuf:"varint,108,opt,name=ShowName,proto3" json:"ShowName,omitempty"`
	Untargetable         int64   `protobuf:"varint,109,opt,name=Untargetable,proto3" json:"Untargetable,omitempty"`
	//New, non-field mapped identified elements
	Race                 *Race    `protobuf:"bytes,110,opt,name=race,proto3" json:"race,omitempty"`
	Class                *Class   `protobuf:"bytes,111,opt,name=class,proto3" json:"class,omitempty"`
	CleanName            string   `protobuf:"bytes,112,opt,name=clean_name,json=cleanName,proto3" json:"clean_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Npc) Reset()         { *m = Npc{} }
func (m *Npc) String() string { return proto.CompactTextString(m) }
func (*Npc) ProtoMessage()    {}
func (*Npc) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1f6e76b0ace78, []int{0}
}

func (m *Npc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Npc.Unmarshal(m, b)
}
func (m *Npc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Npc.Marshal(b, m, deterministic)
}
func (m *Npc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc.Merge(m, src)
}
func (m *Npc) XXX_Size() int {
	return xxx_messageInfo_Npc.Size(m)
}
func (m *Npc) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc.DiscardUnknown(m)
}

var xxx_messageInfo_Npc proto.InternalMessageInfo

func (m *Npc) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Npc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Npc) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Npc) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Npc) GetRaceID() int64 {
	if m != nil {
		return m.RaceID
	}
	return 0
}

func (m *Npc) GetClassID() int64 {
	if m != nil {
		return m.ClassID
	}
	return 0
}

func (m *Npc) GetBodyTypeID() int64 {
	if m != nil {
		return m.BodyTypeID
	}
	return 0
}

func (m *Npc) GetHitpoints() int64 {
	if m != nil {
		return m.Hitpoints
	}
	return 0
}

func (m *Npc) GetMana() int64 {
	if m != nil {
		return m.Mana
	}
	return 0
}

func (m *Npc) GetGender() int64 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *Npc) GetTexture() int64 {
	if m != nil {
		return m.Texture
	}
	return 0
}

func (m *Npc) GetHelmTexture() int64 {
	if m != nil {
		return m.HelmTexture
	}
	return 0
}

func (m *Npc) GetHerosForgeModel() int64 {
	if m != nil {
		return m.HerosForgeModel
	}
	return 0
}

func (m *Npc) GetSize() float32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Npc) GetHpRegenRate() int64 {
	if m != nil {
		return m.HpRegenRate
	}
	return 0
}

func (m *Npc) GetManaRegenRate() int64 {
	if m != nil {
		return m.ManaRegenRate
	}
	return 0
}

func (m *Npc) GetLootID() int64 {
	if m != nil {
		return m.LootID
	}
	return 0
}

func (m *Npc) GetMerchantID() int64 {
	if m != nil {
		return m.MerchantID
	}
	return 0
}

func (m *Npc) GetAltCurrencyID() int64 {
	if m != nil {
		return m.AltCurrencyID
	}
	return 0
}

func (m *Npc) GetNpcSpellsID() int64 {
	if m != nil {
		return m.NpcSpellsID
	}
	return 0
}

func (m *Npc) GetNpcSpellsEffectsID() int64 {
	if m != nil {
		return m.NpcSpellsEffectsID
	}
	return 0
}

func (m *Npc) GetNpcFactionID() int64 {
	if m != nil {
		return m.NpcFactionID
	}
	return 0
}

func (m *Npc) GetAdventureTemplateID() int64 {
	if m != nil {
		return m.AdventureTemplateID
	}
	return 0
}

func (m *Npc) GetTrapTemplate() int64 {
	if m != nil {
		return m.TrapTemplate
	}
	return 0
}

func (m *Npc) GetMininumDamage() int64 {
	if m != nil {
		return m.MininumDamage
	}
	return 0
}

func (m *Npc) GetMaximumDamage() int64 {
	if m != nil {
		return m.MaximumDamage
	}
	return 0
}

func (m *Npc) GetAttackCount() int64 {
	if m != nil {
		return m.AttackCount
	}
	return 0
}

func (m *Npc) GetNpcSpecialAttacks() string {
	if m != nil {
		return m.NpcSpecialAttacks
	}
	return ""
}

func (m *Npc) GetSpecialAbilitiesRaw() string {
	if m != nil {
		return m.SpecialAbilitiesRaw
	}
	return ""
}

func (m *Npc) GetAggroRadius() int64 {
	if m != nil {
		return m.AggroRadius
	}
	return 0
}

func (m *Npc) GetAssistRadius() int64 {
	if m != nil {
		return m.AssistRadius
	}
	return 0
}

func (m *Npc) GetFace() int64 {
	if m != nil {
		return m.Face
	}
	return 0
}

func (m *Npc) GetLuclinHairStyle() int64 {
	if m != nil {
		return m.LuclinHairStyle
	}
	return 0
}

func (m *Npc) GetLuclinHairColor() int64 {
	if m != nil {
		return m.LuclinHairColor
	}
	return 0
}

func (m *Npc) GetLuclinEyeColor() int64 {
	if m != nil {
		return m.LuclinEyeColor
	}
	return 0
}

func (m *Npc) GetLuclinEyeColor2() int64 {
	if m != nil {
		return m.LuclinEyeColor2
	}
	return 0
}

func (m *Npc) GetLuclinBeardColor() int64 {
	if m != nil {
		return m.LuclinBeardColor
	}
	return 0
}

func (m *Npc) GetLuclinBeard() int64 {
	if m != nil {
		return m.LuclinBeard
	}
	return 0
}

func (m *Npc) GetDrakkinHeritage() int64 {
	if m != nil {
		return m.DrakkinHeritage
	}
	return 0
}

func (m *Npc) GetDrakkinTattoo() int64 {
	if m != nil {
		return m.DrakkinTattoo
	}
	return 0
}

func (m *Npc) GetDrakkinDetails() int64 {
	if m != nil {
		return m.DrakkinDetails
	}
	return 0
}

func (m *Npc) GetArmorTintID() int64 {
	if m != nil {
		return m.ArmorTintID
	}
	return 0
}

func (m *Npc) GetArmorTintRed() int64 {
	if m != nil {
		return m.ArmorTintRed
	}
	return 0
}

func (m *Npc) GetArmorTintGreen() int64 {
	if m != nil {
		return m.ArmorTintGreen
	}
	return 0
}

func (m *Npc) GetArmorTintBlue() int64 {
	if m != nil {
		return m.ArmorTintBlue
	}
	return 0
}

func (m *Npc) GetDMeleeTexture1() int64 {
	if m != nil {
		return m.DMeleeTexture1
	}
	return 0
}

func (m *Npc) GetDMeleeTexture2() int64 {
	if m != nil {
		return m.DMeleeTexture2
	}
	return 0
}

func (m *Npc) GetAmmoIDFile() string {
	if m != nil {
		return m.AmmoIDFile
	}
	return ""
}

func (m *Npc) GetPrimaryMeleeTypeID() int64 {
	if m != nil {
		return m.PrimaryMeleeTypeID
	}
	return 0
}

func (m *Npc) GetSecondaryMeleeTypeID() int64 {
	if m != nil {
		return m.SecondaryMeleeTypeID
	}
	return 0
}

func (m *Npc) GetRangedTypeID() int64 {
	if m != nil {
		return m.RangedTypeID
	}
	return 0
}

func (m *Npc) GetRunspeed() float32 {
	if m != nil {
		return m.Runspeed
	}
	return 0
}

func (m *Npc) GetMagicResistance() int64 {
	if m != nil {
		return m.MagicResistance
	}
	return 0
}

func (m *Npc) GetColdResistance() int64 {
	if m != nil {
		return m.ColdResistance
	}
	return 0
}

func (m *Npc) GetDiseaseResistance() int64 {
	if m != nil {
		return m.DiseaseResistance
	}
	return 0
}

func (m *Npc) GetFireResistance() int64 {
	if m != nil {
		return m.FireResistance
	}
	return 0
}

func (m *Npc) GetPoisonResistance() int64 {
	if m != nil {
		return m.PoisonResistance
	}
	return 0
}

func (m *Npc) GetCorruptionResistance() int64 {
	if m != nil {
		return m.CorruptionResistance
	}
	return 0
}

func (m *Npc) GetPhysicalResistance() int64 {
	if m != nil {
		return m.PhysicalResistance
	}
	return 0
}

func (m *Npc) GetSeeInvisible() int64 {
	if m != nil {
		return m.SeeInvisible
	}
	return 0
}

func (m *Npc) GetSeeInvisibleUndead() int64 {
	if m != nil {
		return m.SeeInvisibleUndead
	}
	return 0
}

func (m *Npc) GetQuestGlobal() int64 {
	if m != nil {
		return m.QuestGlobal
	}
	return 0
}

func (m *Npc) GetArmorClass() int64 {
	if m != nil {
		return m.ArmorClass
	}
	return 0
}

func (m *Npc) GetNpcAggro() int64 {
	if m != nil {
		return m.NpcAggro
	}
	return 0
}

func (m *Npc) GetSpawnLimit() int64 {
	if m != nil {
		return m.SpawnLimit
	}
	return 0
}

func (m *Npc) GetAttackSpeed() float32 {
	if m != nil {
		return m.AttackSpeed
	}
	return 0
}

func (m *Npc) GetAttackDelay() int64 {
	if m != nil {
		return m.AttackDelay
	}
	return 0
}

func (m *Npc) GetFindable() int64 {
	if m != nil {
		return m.Findable
	}
	return 0
}

func (m *Npc) GetStrength() int64 {
	if m != nil {
		return m.Strength
	}
	return 0
}

func (m *Npc) GetStamina() int64 {
	if m != nil {
		return m.Stamina
	}
	return 0
}

func (m *Npc) GetDexterity() int64 {
	if m != nil {
		return m.Dexterity
	}
	return 0
}

func (m *Npc) GetAgility() int64 {
	if m != nil {
		return m.Agility
	}
	return 0
}

func (m *Npc) GetIntelligence() int64 {
	if m != nil {
		return m.Intelligence
	}
	return 0
}

func (m *Npc) GetWisdom() int64 {
	if m != nil {
		return m.Wisdom
	}
	return 0
}

func (m *Npc) GetCharisma() int64 {
	if m != nil {
		return m.Charisma
	}
	return 0
}

func (m *Npc) GetSeeHide() int64 {
	if m != nil {
		return m.SeeHide
	}
	return 0
}

func (m *Npc) GetSeeImprovedHide() int64 {
	if m != nil {
		return m.SeeImprovedHide
	}
	return 0
}

func (m *Npc) GetTrackable() int64 {
	if m != nil {
		return m.Trackable
	}
	return 0
}

func (m *Npc) GetIsBot() int64 {
	if m != nil {
		return m.IsBot
	}
	return 0
}

func (m *Npc) GetExclude() int64 {
	if m != nil {
		return m.Exclude
	}
	return 0
}

func (m *Npc) GetAttack() int64 {
	if m != nil {
		return m.Attack
	}
	return 0
}

func (m *Npc) GetAccuracy() int64 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *Npc) GetAvoidance() int64 {
	if m != nil {
		return m.Avoidance
	}
	return 0
}

func (m *Npc) GetSlowMitigation() int64 {
	if m != nil {
		return m.SlowMitigation
	}
	return 0
}

func (m *Npc) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Npc) GetMaxLevel() int64 {
	if m != nil {
		return m.MaxLevel
	}
	return 0
}

func (m *Npc) GetScaleRate() int64 {
	if m != nil {
		return m.ScaleRate
	}
	return 0
}

func (m *Npc) GetPrivateCorpse() int64 {
	if m != nil {
		return m.PrivateCorpse
	}
	return 0
}

func (m *Npc) GetUniqueSpawnByName() int64 {
	if m != nil {
		return m.UniqueSpawnByName
	}
	return 0
}

func (m *Npc) GetUnderwater() int64 {
	if m != nil {
		return m.Underwater
	}
	return 0
}

func (m *Npc) GetIsQuest() int64 {
	if m != nil {
		return m.IsQuest
	}
	return 0
}

func (m *Npc) GetEmoteID() int64 {
	if m != nil {
		return m.EmoteID
	}
	return 0
}

func (m *Npc) GetSpellScale() float32 {
	if m != nil {
		return m.SpellScale
	}
	return 0
}

func (m *Npc) GetHealScale() float32 {
	if m != nil {
		return m.HealScale
	}
	return 0
}

func (m *Npc) GetNoTargetHotkey() int64 {
	if m != nil {
		return m.NoTargetHotkey
	}
	return 0
}

func (m *Npc) GetRaidTarget() int64 {
	if m != nil {
		return m.RaidTarget
	}
	return 0
}

func (m *Npc) GetArmTexture() int64 {
	if m != nil {
		return m.ArmTexture
	}
	return 0
}

func (m *Npc) GetBracerTexture() int64 {
	if m != nil {
		return m.BracerTexture
	}
	return 0
}

func (m *Npc) GetHandTexture() int64 {
	if m != nil {
		return m.HandTexture
	}
	return 0
}

func (m *Npc) GetLegTexture() int64 {
	if m != nil {
		return m.LegTexture
	}
	return 0
}

func (m *Npc) GetFeetTexture() int64 {
	if m != nil {
		return m.FeetTexture
	}
	return 0
}

func (m *Npc) GetLight() int64 {
	if m != nil {
		return m.Light
	}
	return 0
}

func (m *Npc) GetWalkSpeed() int64 {
	if m != nil {
		return m.WalkSpeed
	}
	return 0
}

func (m *Npc) GetPeqID() int64 {
	if m != nil {
		return m.PeqID
	}
	return 0
}

func (m *Npc) GetUnique() int64 {
	if m != nil {
		return m.Unique
	}
	return 0
}

func (m *Npc) GetFixed() int64 {
	if m != nil {
		return m.Fixed
	}
	return 0
}

func (m *Npc) GetIgnoreDespawn() int64 {
	if m != nil {
		return m.IgnoreDespawn
	}
	return 0
}

func (m *Npc) GetShowName() int64 {
	if m != nil {
		return m.ShowName
	}
	return 0
}

func (m *Npc) GetUntargetable() int64 {
	if m != nil {
		return m.Untargetable
	}
	return 0
}

func (m *Npc) GetRace() *Race {
	if m != nil {
		return m.Race
	}
	return nil
}

func (m *Npc) GetClass() *Class {
	if m != nil {
		return m.Class
	}
	return nil
}

func (m *Npc) GetCleanName() string {
	if m != nil {
		return m.CleanName
	}
	return ""
}

func init() {
	proto.RegisterType((*Npc)(nil), "pb.Npc")
}

func init() { proto.RegisterFile("proto/npc.proto", fileDescriptor_8ae1f6e76b0ace78) }

var fileDescriptor_8ae1f6e76b0ace78 = []byte{
	// 1604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x97, 0xfb, 0x7f, 0xdb, 0xc6,
	0x0d, 0xc0, 0x3f, 0x76, 0x1e, 0x8d, 0x99, 0xe6, 0xc5, 0x66, 0x1d, 0x96, 0x25, 0xad, 0x97, 0x65,
	0x9d, 0xd7, 0x75, 0x4e, 0xeb, 0xee, 0xfd, 0x96, 0xc5, 0x28, 0xd6, 0x66, 0x7b, 0x2e, 0x25, 0x37,
	0x7b, 0x77, 0x67, 0x12, 0xa1, 0x6f, 0x3e, 0xde, 0xb1, 0xc7, 0x93, 0x6d, 0xed, 0xdf, 0xdb, 0x3f,
	0xd6, 0x0f, 0x00, 0x52, 0xa4, 0x64, 0xff, 0x26, 0x7c, 0x81, 0xbb, 0xc3, 0xe1, 0x00, 0x08, 0x8c,
	0x1e, 0x54, 0xde, 0x05, 0xf7, 0xd2, 0x56, 0xd9, 0x36, 0xff, 0x8a, 0xd7, 0xab, 0x93, 0x27, 0x4f,
	0x0b, 0xe7, 0x0a, 0x83, 0x2f, 0x55, 0xa5, 0x5f, 0x2a, 0x6b, 0x5d, 0x50, 0x41, 0x3b, 0x5b, 0x8b,
	0xc5, 0x93, 0x87, 0xb2, 0xc4, 0xab, 0x0c, 0x1b, 0xf2, 0x48, 0x48, 0x66, 0x54, 0xdd, 0x18, 0x3d,
	0xff, 0xff, 0xb3, 0xe8, 0xc6, 0x61, 0x95, 0xc5, 0xf7, 0xa3, 0xf5, 0x71, 0x02, 0x6b, 0x9b, 0x6b,
	0x5b, 0x37, 0xd2, 0xf5, 0x71, 0x12, 0xc7, 0xd1, 0xcd, 0x43, 0x55, 0x22, 0xac, 0x6f, 0xae, 0x6d,
	0x6d, 0xa4, 0xfc, 0x3b, 0x7e, 0x12, 0xdd, 0xd9, 0x57, 0x75, 0x60, 0x7e, 0x83, 0xf9, 0x42, 0x8e,
	0x1f, 0x47, 0xb7, 0xf6, 0xf1, 0x1c, 0x0d, 0xdc, 0xe4, 0x2d, 0x44, 0x88, 0xdf, 0x8f, 0x6e, 0xa7,
	0x2a, 0xc3, 0x71, 0x02, 0xb7, 0x18, 0x37, 0x52, 0x0c, 0xd1, 0x3b, 0x43, 0x72, 0x62, 0x9c, 0xc0,
	0x6d, 0x56, 0xb4, 0x62, 0xfc, 0x41, 0x14, 0xed, 0xba, 0x7c, 0x3e, 0x9d, 0x57, 0xb4, 0xea, 0x1d,
	0x56, 0xf6, 0x48, 0xfc, 0x34, 0xda, 0xd8, 0xd3, 0xa1, 0x72, 0xda, 0x86, 0x1a, 0xee, 0xb0, 0xba,
	0x03, 0xe4, 0xf5, 0x81, 0xb2, 0x0a, 0x36, 0x58, 0xc1, 0xbf, 0xc9, 0x87, 0xd7, 0x68, 0x73, 0xf4,
	0x10, 0x89, 0x0f, 0x22, 0x91, 0x0f, 0x53, 0xbc, 0x0c, 0x33, 0x8f, 0x70, 0x57, 0x7c, 0x68, 0xc4,
	0x78, 0x33, 0xba, 0xbb, 0x87, 0xa6, 0x6c, 0xb5, 0xef, 0xb2, 0xb6, 0x8f, 0xe2, 0xad, 0xe8, 0xc1,
	0x1e, 0x7a, 0x57, 0x8f, 0x9c, 0x2f, 0xf0, 0xc0, 0xe5, 0x68, 0xe0, 0x1e, 0x5b, 0xad, 0x62, 0xf2,
	0x68, 0xa2, 0xff, 0x87, 0x70, 0x7f, 0x73, 0x6d, 0x6b, 0x3d, 0xe5, 0xdf, 0xbc, 0x7f, 0x95, 0x62,
	0x81, 0x36, 0x55, 0x01, 0xe1, 0x41, 0xb3, 0x7f, 0x87, 0xe2, 0x17, 0xd1, 0x3d, 0xf2, 0xbd, 0xb3,
	0x79, 0xc8, 0x36, 0xcb, 0x90, 0x6e, 0xb6, 0xef, 0x5c, 0x18, 0x27, 0xf0, 0x48, 0x6e, 0x26, 0x12,
	0xc5, 0xf0, 0x00, 0x7d, 0x76, 0xaa, 0x2c, 0xe9, 0x62, 0x89, 0x61, 0x47, 0x68, 0xf7, 0x81, 0x09,
	0xc3, 0x99, 0xf7, 0x68, 0xb3, 0xf9, 0x38, 0x81, 0xf7, 0x64, 0xf7, 0x25, 0x48, 0x5e, 0x1e, 0x56,
	0xd9, 0xa4, 0x42, 0x63, 0xe8, 0x9d, 0x1e, 0x8b, 0x97, 0x3d, 0x14, 0x6f, 0x47, 0xf1, 0x42, 0x7c,
	0xf5, 0xf6, 0x2d, 0x66, 0x81, 0x0c, 0xbf, 0xc5, 0x86, 0xd7, 0x68, 0xe2, 0xe7, 0xd1, 0xbb, 0x87,
	0x55, 0x36, 0x52, 0x19, 0x65, 0xe9, 0x38, 0x81, 0xf7, 0xd9, 0x72, 0x89, 0xc5, 0x9f, 0x46, 0xef,
	0x0d, 0xf2, 0x73, 0xb4, 0x14, 0xe6, 0x29, 0x96, 0x95, 0x51, 0x81, 0x12, 0xe1, 0xdb, 0x6c, 0x7a,
	0x9d, 0x8a, 0x76, 0x9d, 0x7a, 0x55, 0xb5, 0x04, 0x40, 0x76, 0xed, 0x33, 0x8e, 0xa7, 0xb6, 0xda,
	0xce, 0xca, 0x44, 0x95, 0xaa, 0x40, 0xf8, 0x4e, 0x13, 0xcf, 0x3e, 0x94, 0xa8, 0x5f, 0xea, 0x72,
	0x61, 0xf5, 0xa4, 0x8d, 0x7a, 0x0f, 0x52, 0x5c, 0x06, 0x21, 0xa8, 0xec, 0x6c, 0xe8, 0x66, 0x36,
	0xc0, 0x77, 0x25, 0x2e, 0x3d, 0x14, 0x7f, 0x12, 0x3d, 0x92, 0xdb, 0x67, 0x5a, 0x19, 0x51, 0xd4,
	0xf0, 0x94, 0x0b, 0xe6, 0xaa, 0x82, 0x6e, 0xdc, 0x92, 0x13, 0x6d, 0x74, 0xd0, 0x58, 0xa7, 0xea,
	0x02, 0x9e, 0xb1, 0xfd, 0x75, 0x2a, 0xf6, 0xa0, 0x28, 0xbc, 0x4b, 0x55, 0xae, 0x67, 0x35, 0x7c,
	0xd0, 0x78, 0xd0, 0x21, 0x8a, 0xc9, 0xa0, 0xae, 0x75, 0x1d, 0x1a, 0x93, 0x0f, 0x25, 0x26, 0x7d,
	0x46, 0x99, 0x39, 0x52, 0x19, 0xc2, 0xa6, 0xd4, 0x0a, 0xfd, 0xa6, 0xbc, 0xde, 0x9f, 0x65, 0x46,
	0xdb, 0x3d, 0xa5, 0xfd, 0x24, 0xcc, 0x0d, 0xc2, 0xf7, 0x24, 0xaf, 0x57, 0xf0, 0xb2, 0xe5, 0xd0,
	0x19, 0xe7, 0xe1, 0xf9, 0xaa, 0x25, 0xe3, 0xf8, 0xa3, 0xe8, 0xbe, 0xa0, 0x57, 0x73, 0x14, 0xc3,
	0xef, 0xb3, 0xe1, 0x0a, 0xed, 0x76, 0x6c, 0xc9, 0x0e, 0xbc, 0xe8, 0xef, 0xb8, 0xc0, 0xf1, 0xc7,
	0xd1, 0x43, 0x41, 0xbb, 0xa8, 0x7c, 0x2e, 0x7b, 0xfe, 0x80, 0x4d, 0xaf, 0x70, 0x8a, 0x55, 0x8f,
	0xc1, 0x47, 0x12, 0xab, 0x1e, 0xa2, 0x73, 0x13, 0xaf, 0xce, 0xce, 0xb4, 0xdd, 0x43, 0xaf, 0x03,
	0xbd, 0xfb, 0x0f, 0xe5, 0xdc, 0x15, 0x4c, 0xf9, 0xd1, 0xa0, 0xa9, 0x0a, 0xc1, 0x39, 0xd8, 0x92,
	0xfc, 0x58, 0x82, 0x74, 0xdf, 0x06, 0x24, 0x18, 0x94, 0x36, 0x35, 0xfc, 0x48, 0xee, 0xbb, 0x4c,
	0xf9, 0x15, 0x7d, 0xe9, 0xfc, 0x54, 0x73, 0x99, 0x7e, 0xdc, 0xbc, 0x62, 0x87, 0xf8, 0x15, 0x5b,
	0x31, 0xc5, 0x1c, 0x7e, 0xdc, 0xbc, 0x62, 0x8f, 0xd1, 0x69, 0x0b, 0xf9, 0xb5, 0x47, 0xb4, 0xf0,
	0x89, 0x9c, 0xb6, 0x4c, 0xb9, 0xe6, 0x5b, 0xb2, 0x6b, 0x66, 0x08, 0x3f, 0x69, 0x6a, 0xbe, 0x0f,
	0xd9, 0xf7, 0x03, 0x34, 0x88, 0x4d, 0xa3, 0xfb, 0x0c, 0xb6, 0x1b, 0xdf, 0x97, 0xe8, 0x15, 0xbb,
	0x1d, 0x78, 0x79, 0x8d, 0xdd, 0x0e, 0x75, 0xa2, 0x41, 0x59, 0xba, 0x71, 0x32, 0xd2, 0x06, 0xe1,
	0x53, 0x4e, 0xe9, 0x1e, 0xa1, 0x0e, 0x72, 0xe4, 0x75, 0xa9, 0xfc, 0x5c, 0xd6, 0x49, 0xd7, 0xff,
	0x4c, 0x3a, 0xc8, 0x55, 0x4d, 0xbc, 0x13, 0x3d, 0x9e, 0x60, 0xe6, 0x6c, 0xbe, 0xb2, 0x62, 0x87,
	0x57, 0x5c, 0xab, 0xa3, 0x28, 0xa6, 0xca, 0x16, 0x98, 0x37, 0xb6, 0x9f, 0x4b, 0x14, 0xfb, 0x8c,
	0xfe, 0xd9, 0xd2, 0x99, 0xad, 0x2b, 0xc4, 0x1c, 0x7e, 0xca, 0x9d, 0x7a, 0x21, 0x53, 0x7e, 0x1c,
	0xa8, 0x42, 0x67, 0x29, 0x52, 0xf1, 0x28, 0x9b, 0x21, 0xfc, 0x4c, 0xf2, 0x63, 0x05, 0x53, 0x54,
	0x86, 0xce, 0xe4, 0x3d, 0xc3, 0x9f, 0x4b, 0x54, 0x96, 0x29, 0xf5, 0x87, 0x44, 0xd7, 0xa8, 0x6a,
	0xec, 0x99, 0xfe, 0x82, 0x4d, 0xaf, 0x2a, 0x68, 0xd7, 0x91, 0xf6, 0x7d, 0xd3, 0x5f, 0xca, 0xae,
	0xcb, 0x94, 0xaa, 0xe2, 0xc8, 0xe9, 0xda, 0xd9, 0x9e, 0xe5, 0xaf, 0xa4, 0x2a, 0x56, 0x39, 0xc5,
	0x71, 0xe8, 0xbc, 0x9f, 0x55, 0xd4, 0x75, 0x7b, 0xf6, 0xbf, 0x96, 0x38, 0x5e, 0xa7, 0xe3, 0xb7,
	0x3a, 0x9d, 0xd7, 0x3a, 0x53, 0xa6, 0xb7, 0xe2, 0x37, 0xcd, 0x5b, 0x5d, 0xd1, 0x50, 0xdc, 0x27,
	0x88, 0x63, 0x7b, 0xae, 0x6b, 0x7d, 0x62, 0x10, 0x7e, 0x2b, 0x71, 0xef, 0x33, 0xda, 0xb3, 0x2f,
	0x1f, 0xdb, 0x1c, 0x55, 0x0e, 0xbf, 0x93, 0x3d, 0xaf, 0x6a, 0xa8, 0x66, 0xbe, 0x98, 0x61, 0x1d,
	0x5e, 0x1b, 0x77, 0xa2, 0x0c, 0xfc, 0x5e, 0x6a, 0xa6, 0x87, 0x38, 0xe3, 0x28, 0xa5, 0x79, 0x9e,
	0x80, 0x3f, 0xc8, 0x7f, 0x5f, 0x47, 0xe8, 0xa5, 0x0f, 0xab, 0x8c, 0x7b, 0x25, 0xfc, 0x91, 0xb5,
	0x0b, 0x99, 0xd6, 0x4e, 0x2a, 0x75, 0x61, 0xf7, 0x75, 0xa9, 0x03, 0x0c, 0x64, 0x6d, 0x47, 0xba,
	0xce, 0x3f, 0xe1, 0x44, 0xd9, 0xe5, 0x44, 0xe9, 0xa3, 0xce, 0x22, 0x41, 0xa3, 0xe6, 0x30, 0xec,
	0xff, 0x37, 0x30, 0xa2, 0xf3, 0x47, 0xda, 0xe6, 0x8a, 0x22, 0x92, 0xc8, 0xf9, 0xad, 0x4c, 0xba,
	0x49, 0xf0, 0x68, 0x8b, 0x70, 0x0a, 0xaf, 0x44, 0xd7, 0xca, 0x34, 0xad, 0x4c, 0x82, 0x2a, 0xb5,
	0x55, 0x30, 0x92, 0x69, 0xa5, 0x11, 0x69, 0x22, 0x4a, 0xf0, 0x32, 0x50, 0x93, 0x9a, 0xc3, 0x6b,
	0x99, 0x88, 0x16, 0x80, 0xd6, 0x0d, 0x0a, 0xfa, 0xef, 0x98, 0xc3, 0x9e, 0xac, 0x6b, 0x44, 0x7a,
	0x9f, 0xb1, 0x0d, 0x68, 0x8c, 0x2e, 0x90, 0x5e, 0x72, 0x2c, 0xef, 0xd3, 0x67, 0x34, 0x61, 0xbc,
	0xd1, 0x75, 0xee, 0x4a, 0xf8, 0x93, 0x4c, 0x18, 0x22, 0x91, 0xa7, 0xc3, 0x53, 0xe5, 0x75, 0x5d,
	0x2a, 0xf8, 0xb3, 0x78, 0xda, 0xca, 0xec, 0x29, 0xe2, 0x9e, 0xce, 0x11, 0xf6, 0x1b, 0x4f, 0x45,
	0xa4, 0x4a, 0xa2, 0x37, 0x2d, 0x2b, 0xef, 0xce, 0x31, 0x67, 0x8b, 0x03, 0xa9, 0xa4, 0x15, 0x4c,
	0x77, 0x9a, 0x7a, 0x95, 0x9d, 0x71, 0x98, 0x0e, 0xe5, 0x4e, 0x0b, 0x40, 0xb3, 0xe6, 0xb8, 0xde,
	0x75, 0x01, 0xfe, 0x22, 0xb3, 0x26, 0x0b, 0x74, 0xee, 0xab, 0xcb, 0xcc, 0xcc, 0x72, 0x84, 0x23,
	0x39, 0xb7, 0x11, 0xe9, 0x16, 0xf2, 0x04, 0xf0, 0x85, 0xdc, 0x42, 0x24, 0xba, 0xc5, 0x20, 0xcb,
	0x66, 0x5e, 0x65, 0x73, 0x48, 0xe5, 0x16, 0xad, 0x4c, 0x1e, 0x0c, 0xce, 0x9d, 0xce, 0x39, 0xc9,
	0x27, 0xe2, 0xc1, 0x02, 0x50, 0x4d, 0x4e, 0x8c, 0xbb, 0x38, 0xd0, 0x41, 0x17, 0x3c, 0x73, 0xc3,
	0x54, 0x6a, 0x72, 0x99, 0x92, 0x4f, 0x5f, 0xa2, 0xaf, 0xc9, 0xe0, 0x58, 0x7c, 0x6a, 0x44, 0x3a,
	0xfb, 0x40, 0x5d, 0xca, 0xc8, 0xfc, 0xa5, 0x9c, 0xdd, 0xca, 0x74, 0xf6, 0x24, 0x53, 0x06, 0x79,
	0xf2, 0x7b, 0x23, 0x67, 0x2f, 0x00, 0x75, 0xf2, 0x23, 0xaf, 0xcf, 0x55, 0xc0, 0xa1, 0xf3, 0x55,
	0x8d, 0xf0, 0x57, 0xe9, 0xe4, 0x4b, 0x90, 0x7a, 0xcc, 0xb1, 0xd5, 0x5f, 0xcf, 0x90, 0xf3, 0x77,
	0x77, 0xce, 0x43, 0xfb, 0xdf, 0xa4, 0xc7, 0x5c, 0x51, 0x50, 0xe6, 0x53, 0x85, 0xf9, 0x0b, 0x15,
	0xd0, 0xc3, 0xdf, 0x25, 0xf3, 0x3b, 0x42, 0xf7, 0x18, 0xd7, 0x5c, 0x66, 0xf0, 0x0f, 0xb9, 0x47,
	0x23, 0x72, 0xd4, 0x4b, 0xc7, 0x33, 0xda, 0x3f, 0x9b, 0xa8, 0x8b, 0x28, 0xd5, 0x84, 0xc6, 0xb0,
	0xe7, 0xf0, 0x2f, 0x2e, 0x96, 0x1e, 0xe1, 0x49, 0x1e, 0x55, 0xa3, 0xfe, 0x37, 0xab, 0x3b, 0x40,
	0x11, 0x3e, 0x74, 0x53, 0xe5, 0x0b, 0x0c, 0x7b, 0x2e, 0x9c, 0xe1, 0x1c, 0xbe, 0x92, 0x08, 0x2f,
	0x53, 0x3a, 0x25, 0x55, 0x3a, 0x17, 0x06, 0xff, 0x11, 0xcf, 0x3b, 0xd2, 0xf4, 0x83, 0x76, 0x94,
	0x57, 0x8b, 0x7e, 0xd0, 0x4e, 0xf2, 0x2f, 0xa2, 0x7b, 0xbb, 0xf4, 0x85, 0xe4, 0x5b, 0x93, 0x13,
	0x89, 0xe6, 0x12, 0xe4, 0x89, 0x5d, 0xd9, 0xbc, 0xb5, 0xc9, 0x9a, 0x89, 0xbd, 0x43, 0x74, 0xce,
	0x3e, 0x16, 0xad, 0x41, 0x2e, 0xe7, 0x74, 0x84, 0x76, 0x18, 0x21, 0x86, 0xd6, 0x00, 0x65, 0x87,
	0x1e, 0xe2, 0x2f, 0x28, 0x5d, 0x9c, 0x06, 0x78, 0xdb, 0x7c, 0x41, 0x91, 0x40, 0x51, 0x7a, 0xa3,
	0x4c, 0xd3, 0x71, 0x0a, 0xc9, 0x85, 0x05, 0xa0, 0x35, 0x47, 0xf8, 0xf5, 0x38, 0x81, 0x53, 0x59,
	0xc3, 0x02, 0xe5, 0xbb, 0x3c, 0x31, 0x68, 0xc9, 0x77, 0x91, 0xc8, 0x7a, 0xa4, 0x2f, 0x31, 0x87,
	0xff, 0x8a, 0x35, 0x0b, 0x14, 0x81, 0x71, 0x61, 0x9d, 0xc7, 0x04, 0x6b, 0x4a, 0x09, 0x38, 0x93,
	0x08, 0x2c, 0x41, 0xee, 0x4d, 0xa7, 0xee, 0x82, 0xd3, 0xc8, 0x34, 0xbd, 0xa9, 0x91, 0xa9, 0x93,
	0x1c, 0xdb, 0xc0, 0xf1, 0xe6, 0x82, 0x2d, 0xa5, 0x93, 0xf4, 0x59, 0xfc, 0x34, 0xba, 0x49, 0x11,
	0x05, 0xbb, 0xb9, 0xb6, 0x75, 0x77, 0xe7, 0xce, 0x76, 0x75, 0xb2, 0x4d, 0xdf, 0x82, 0x29, 0xd3,
	0xf8, 0xc3, 0xe8, 0x16, 0x7f, 0x94, 0x82, 0x63, 0xf5, 0x06, 0xa9, 0xb9, 0x5f, 0xa7, 0xc2, 0xe3,
	0x67, 0x51, 0x94, 0x19, 0x54, 0xf6, 0x2b, 0x4b, 0x0e, 0x54, 0x3c, 0x48, 0x6c, 0x30, 0x21, 0x0f,
	0x4e, 0x6e, 0xf3, 0xc7, 0xec, 0xe7, 0xdf, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x2e, 0x85, 0x06,
	0x26, 0x0f, 0x00, 0x00,
}
