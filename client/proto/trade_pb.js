// source: proto/trade.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.Trade', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Trade.displayName = 'proto.pb.Trade';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Trade.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Trade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    char1id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    char1pp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    char1gp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    char1sp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    char1cp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    char1items: jspb.Message.getFieldWithDefault(msg, 8, 0),
    char2id: jspb.Message.getFieldWithDefault(msg, 9, 0),
    char2pp: jspb.Message.getFieldWithDefault(msg, 10, 0),
    char2gp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    char2sp: jspb.Message.getFieldWithDefault(msg, 12, 0),
    char2cp: jspb.Message.getFieldWithDefault(msg, 13, 0),
    char2items: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Trade}
 */
proto.pb.Trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Trade;
  return proto.pb.Trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Trade}
 */
proto.pb.Trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar1id(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar1pp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar1gp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar1sp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar1cp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar1items(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar2id(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar2pp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar2gp(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar2sp(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar2cp(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChar2items(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Trade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Trade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getChar1id();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getChar1pp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getChar1gp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getChar1sp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getChar1cp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getChar1items();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getChar2id();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getChar2pp();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getChar2gp();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getChar2sp();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getChar2cp();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getChar2items();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.Trade.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.pb.Trade.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 char1id = 3;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar1id = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar1id = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 char1pp = 4;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar1pp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar1pp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 char1gp = 5;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar1gp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar1gp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 char1sp = 6;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar1sp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar1sp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 char1cp = 7;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar1cp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar1cp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 char1items = 8;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar1items = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar1items = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 char2id = 9;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar2id = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar2id = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 char2pp = 10;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar2pp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar2pp = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 char2gp = 11;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar2gp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar2gp = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 char2sp = 12;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar2sp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar2sp = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 char2cp = 13;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar2cp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar2cp = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 char2items = 14;
 * @return {number}
 */
proto.pb.Trade.prototype.getChar2items = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Trade} returns this
 */
proto.pb.Trade.prototype.setChar2items = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


goog.object.extend(exports, proto.pb);
